/*
Copyright 2022 The Koordinator Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/koordinator-sh/koordinator/apis/thirdparty/scheduler-plugins/pkg/apis/scheduling/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ElasticQuotaLister helps list ElasticQuotas.
// All objects returned here must be treated as read-only.
type ElasticQuotaLister interface {
	// List lists all ElasticQuotas in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ElasticQuota, err error)
	// ElasticQuotas returns an object that can list and get ElasticQuotas.
	ElasticQuotas(namespace string) ElasticQuotaNamespaceLister
	ElasticQuotaListerExpansion
}

// elasticQuotaLister implements the ElasticQuotaLister interface.
type elasticQuotaLister struct {
	indexer cache.Indexer
}

// NewElasticQuotaLister returns a new ElasticQuotaLister.
func NewElasticQuotaLister(indexer cache.Indexer) ElasticQuotaLister {
	return &elasticQuotaLister{indexer: indexer}
}

// List lists all ElasticQuotas in the indexer.
func (s *elasticQuotaLister) List(selector labels.Selector) (ret []*v1alpha1.ElasticQuota, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ElasticQuota))
	})
	return ret, err
}

// ElasticQuotas returns an object that can list and get ElasticQuotas.
func (s *elasticQuotaLister) ElasticQuotas(namespace string) ElasticQuotaNamespaceLister {
	return elasticQuotaNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ElasticQuotaNamespaceLister helps list and get ElasticQuotas.
// All objects returned here must be treated as read-only.
type ElasticQuotaNamespaceLister interface {
	// List lists all ElasticQuotas in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ElasticQuota, err error)
	// Get retrieves the ElasticQuota from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ElasticQuota, error)
	ElasticQuotaNamespaceListerExpansion
}

// elasticQuotaNamespaceLister implements the ElasticQuotaNamespaceLister
// interface.
type elasticQuotaNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ElasticQuotas in the indexer for a given namespace.
func (s elasticQuotaNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ElasticQuota, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ElasticQuota))
	})
	return ret, err
}

// Get retrieves the ElasticQuota from the indexer for a given namespace and name.
func (s elasticQuotaNamespaceLister) Get(name string) (*v1alpha1.ElasticQuota, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("elasticquota"), name)
	}
	return obj.(*v1alpha1.ElasticQuota), nil
}
