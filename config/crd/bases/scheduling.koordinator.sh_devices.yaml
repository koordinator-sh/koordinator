---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.14.0
  name: devices.scheduling.koordinator.sh
spec:
  group: scheduling.koordinator.sh
  names:
    kind: Device
    listKind: DeviceList
    plural: devices
    singular: device
  scope: Cluster
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            properties:
              devices:
                items:
                  properties:
                    conditions:
                      description: Conditions represents current conditions of device
                      items:
                        description: "Condition contains details for one aspect of
                          the current state of this API Resource.\n---\nThis struct
                          is intended for direct use as an array at the field path
                          .status.conditions.  For example,\n\n\n\ttype FooStatus
                          struct{\n\t    // Represents the observations of a foo's
                          current state.\n\t    // Known .status.conditions.type are:
                          \"Available\", \"Progressing\", and \"Degraded\"\n\t    //
                          +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    //
                          +listType=map\n\t    // +listMapKey=type\n\t    Conditions
                          []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\"
                          patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t
                          \   // other fields\n\t}"
                        properties:
                          lastTransitionTime:
                            description: |-
                              lastTransitionTime is the last time the condition transitioned from one status to another.
                              This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                            format: date-time
                            type: string
                          message:
                            description: |-
                              message is a human readable message indicating details about the transition.
                              This may be an empty string.
                            maxLength: 32768
                            type: string
                          observedGeneration:
                            description: |-
                              observedGeneration represents the .metadata.generation that the condition was set based upon.
                              For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                              with respect to the current state of the instance.
                            format: int64
                            minimum: 0
                            type: integer
                          reason:
                            description: |-
                              reason contains a programmatic identifier indicating the reason for the condition's last transition.
                              Producers of specific condition types may define expected values and meanings for this field,
                              and whether the values are considered a guaranteed API.
                              The value should be a CamelCase string.
                              This field may not be empty.
                            maxLength: 1024
                            minLength: 1
                            pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                            type: string
                          status:
                            description: status of the condition, one of True, False,
                              Unknown.
                            enum:
                            - "True"
                            - "False"
                            - Unknown
                            type: string
                          type:
                            description: |-
                              type of condition in CamelCase or in foo.example.com/CamelCase.
                              ---
                              Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
                              useful (see .node.status.conditions), the ability to deconflict is important.
                              The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                            maxLength: 316
                            pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                            type: string
                        required:
                        - lastTransitionTime
                        - message
                        - reason
                        - status
                        - type
                        type: object
                      type: array
                    health:
                      default: false
                      description: Health indicates whether the device is normal
                      type: boolean
                    id:
                      description: UUID represents the UUID of device
                      type: string
                    labels:
                      additionalProperties:
                        type: string
                      description: Labels represents the device properties that can
                        be used to organize and categorize (scope and select) objects
                      type: object
                    minor:
                      description: Minor represents the Minor number of Device, starting
                        from 0
                      format: int32
                      type: integer
                    moduleID:
                      description: ModuleID represents the physical id of Device
                      format: int32
                      type: integer
                    resources:
                      additionalProperties:
                        anyOf:
                        - type: integer
                        - type: string
                        pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                        x-kubernetes-int-or-string: true
                      description: Resources is a set of (resource name, quantity)
                        pairs
                      type: object
                    topology:
                      description: Topology represents the topology information about
                        the device
                      properties:
                        busID:
                          description: BusID is the domain:bus:device.function formatted
                            identifier of PCI/PCIE device
                          type: string
                        nodeID:
                          description: NodeID is the ID of NUMA Node to which the
                            device belongs, it should be unique across different CPU
                            Sockets
                          format: int32
                          type: integer
                        pcieID:
                          description: PCIEID is the ID of PCIE Switch to which the
                            device is connected, it should be unique across difference
                            NUMANodes
                          type: string
                        socketID:
                          description: SocketID is the ID of CPU Socket to which the
                            device belongs
                          format: int32
                          type: integer
                      required:
                      - nodeID
                      - pcieID
                      - socketID
                      type: object
                    type:
                      description: Type represents the type of device
                      type: string
                    vfGroups:
                      description: VFGroups represents the virtual function devices
                      items:
                        properties:
                          labels:
                            additionalProperties:
                              type: string
                            description: Labels represents the Virtual Function properties
                              that can be used to organize and categorize (scope and
                              select) objects
                            type: object
                          vfs:
                            description: VFs are the virtual function devices which
                              belong to the group
                            items:
                              properties:
                                busID:
                                  description: BusID is the domain:bus:device.function
                                    formatted identifier of PCI/PCIE virtual function
                                    device
                                  type: string
                                minor:
                                  description: Minor represents the Minor number of
                                    VirtualFunction, starting from 0, used to identify
                                    virtual function.
                                  format: int32
                                  type: integer
                              required:
                              - minor
                              type: object
                            type: array
                        type: object
                      type: array
                  required:
                  - health
                  type: object
                type: array
            type: object
          status:
            properties:
              allocations:
                items:
                  properties:
                    entries:
                      items:
                        properties:
                          minors:
                            items:
                              format: int32
                              type: integer
                            type: array
                          name:
                            type: string
                          namespace:
                            type: string
                          uuid:
                            type: string
                        type: object
                      type: array
                    type:
                      type: string
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: true
