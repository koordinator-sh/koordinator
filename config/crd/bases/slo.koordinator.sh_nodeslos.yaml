---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.9.0
  creationTimestamp: null
  name: nodeslos.slo.koordinator.sh
spec:
  group: slo.koordinator.sh
  names:
    kind: NodeSLO
    listKind: NodeSLOList
    plural: nodeslos
    singular: nodeslo
  scope: Cluster
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: NodeSLO is the Schema for the nodeslos API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: NodeSLOSpec defines the desired state of NodeSLO
            properties:
              cpuBurstStrategy:
                description: CPU Burst Strategy
                properties:
                  cfsQuotaBurstPercent:
                    description: pod cfs quota scale up ceil percentage, default =
                      300 (300%)
                    format: int64
                    type: integer
                  cfsQuotaBurstPeriodSeconds:
                    description: specifies a period of time for pod can use at burst,
                      default = -1 (unlimited)
                    format: int64
                    type: integer
                  cpuBurstPercent:
                    description: 'cpu burst percentage for setting cpu.cfs_burst_us,
                      legal range: [0, 10000], default as 1000 (1000%)'
                    format: int64
                    maximum: 10000
                    minimum: 0
                    type: integer
                  policy:
                    type: string
                  sharePoolThresholdPercent:
                    description: scale down cfs quota if node cpu overload, default
                      = 50
                    format: int64
                    type: integer
                type: object
              extensions:
                description: Third party extensions for NodeSLO
                type: object
                x-kubernetes-preserve-unknown-fields: true
              hostApplications:
                description: QoS management for out-of-band applications
                items:
                  description: HostApplicationSpec describes the QoS management for
                    out-out-band applications on node
                  properties:
                    cgroupPath:
                      description: Optional, defines the host cgroup configuration,
                        use default if not specified according to priority and qos
                      properties:
                        base:
                          description: cgroup base dir, the format is various across
                            cgroup drivers
                          type: string
                        parentDir:
                          description: cgroup parent path under base dir
                          type: string
                        relativePath:
                          description: cgroup relative path under parent dir
                          type: string
                      type: object
                    name:
                      type: string
                    priority:
                      description: Priority class of the application
                      type: string
                    qos:
                      description: QoS class of the application
                      type: string
                    strategy:
                      description: QoS Strategy of host application
                      type: object
                  type: object
                type: array
              resourceQOSStrategy:
                description: QoS config strategy for pods of different qos-class
                properties:
                  beClass:
                    description: ResourceQOS for BE pods.
                    properties:
                      blkioQOS:
                        properties:
                          blocks:
                            items:
                              properties:
                                ioCfg:
                                  properties:
                                    ioWeightPercent:
                                      description: 'This field is used to set the
                                        weight of a sub-group. Default value: 100.
                                        Valid values: 1 to 100.'
                                      format: int64
                                      maximum: 100
                                      minimum: 1
                                      type: integer
                                    readBPS:
                                      description: Throttling of throughput The value
                                        is set to 0, which indicates that the feature
                                        is disabled.
                                      format: int64
                                      minimum: 0
                                      type: integer
                                    readIOPS:
                                      description: Throttling of IOPS The value is
                                        set to 0, which indicates that the feature
                                        is disabled.
                                      format: int64
                                      minimum: 0
                                      type: integer
                                    readLatency:
                                      description: 'Configure the weight-based throttling
                                        feature of blk-iocost Only used for RootClass
                                        After blk-iocost is enabled, the kernel calculates
                                        the proportion of requests that exceed the
                                        read or write latency threshold out of all
                                        requests. When the proportion is greater than
                                        the read or write latency percentile (95%),
                                        the kernel considers the disk to be saturated
                                        and reduces the rate at which requests are
                                        sent to the disk. the read latency threshold.
                                        Unit: microseconds.'
                                      format: int64
                                      type: integer
                                    writeBPS:
                                      format: int64
                                      minimum: 0
                                      type: integer
                                    writeIOPS:
                                      format: int64
                                      minimum: 0
                                      type: integer
                                    writeLatency:
                                      description: 'the write latency threshold. Unit:
                                        microseconds.'
                                      format: int64
                                      type: integer
                                  type: object
                                name:
                                  type: string
                                type:
                                  type: string
                              type: object
                            type: array
                          enable:
                            type: boolean
                        type: object
                      cpuQOS:
                        description: CPUQOSCfg stores node-level config of cpu qos
                        properties:
                          enable:
                            description: Enable indicates whether the cpu qos is enabled.
                            type: boolean
                          groupIdentity:
                            description: group identity value for pods, default =
                              0
                            format: int64
                            type: integer
                        type: object
                      memoryQOS:
                        description: MemoryQOSCfg stores node-level config of memory
                          qos
                        properties:
                          enable:
                            description: 'Enable indicates whether the memory qos
                              is enabled (default: false). This field is used for
                              node-level control, while pod-level configuration is
                              done with MemoryQOS and `Policy` instead of an `Enable`
                              option. Please view the differences between MemoryQOSCfg
                              and PodMemoryQOSConfig structs.'
                            type: boolean
                          lowLimitPercent:
                            description: 'LowLimitPercent specifies the lowLimitFactor
                              percentage to calculate `memory.low`, which TRIES BEST
                              protecting memory from global reclamation when memory
                              usage does not exceed the low limit unless no unprotected
                              memcg can be reclaimed. NOTE: `memory.low` should be
                              larger than `memory.min`. If spec.requests.memory ==
                              spec.limits.memory, pod `memory.low` and `memory.high`
                              become invalid, while `memory.wmark_ratio` is still
                              in effect. Close: 0.'
                            format: int64
                            minimum: 0
                            type: integer
                          minLimitPercent:
                            description: 'memcg qos If enabled, memcg qos will be
                              set by the agent, where some fields are implicitly calculated
                              from pod spec. 1. `memory.min` := spec.requests.memory
                              * minLimitFactor / 100 (use 0 if requests.memory is
                              not set) 2. `memory.low` := spec.requests.memory * lowLimitFactor
                              / 100 (use 0 if requests.memory is not set) 3. `memory.limit_in_bytes`
                              := spec.limits.memory (set $node.allocatable.memory
                              if limits.memory is not set) 4. `memory.high` := floor[(spec.requests.memory
                              + throttlingFactor / 100 * (memory.limit_in_bytes or
                              node allocatable memory - spec.requests.memory))/pageSize]
                              * pageSize MinLimitPercent specifies the minLimitFactor
                              percentage to calculate `memory.min`, which protects
                              memory from global reclamation when memory usage does
                              not exceed the min limit. Close: 0.'
                            format: int64
                            minimum: 0
                            type: integer
                          oomKillGroup:
                            format: int64
                            type: integer
                          priority:
                            format: int64
                            type: integer
                          priorityEnable:
                            description: 'TODO: enhance the usages of oom priority
                              and oom kill group'
                            format: int64
                            type: integer
                          throttlingPercent:
                            description: 'ThrottlingPercent specifies the throttlingFactor
                              percentage to calculate `memory.high` with pod memory.limits
                              or node allocatable memory, which triggers memcg direct
                              reclamation when memory usage exceeds. Lower the factor
                              brings more heavier reclaim pressure. Close: 0.'
                            format: int64
                            minimum: 0
                            type: integer
                          wmarkMinAdj:
                            description: 'wmark_min_adj (Anolis OS required) WmarkMinAdj
                              specifies `memory.wmark_min_adj` which adjusts per-memcg
                              threshold for global memory reclamation. Lower the factor
                              brings later reclamation. The adjustment uses different
                              formula for different value range. [-25, 0)：global_wmark_min''
                              = global_wmark_min + (global_wmark_min - 0) * wmarkMinAdj
                              (0, 50]：global_wmark_min'' = global_wmark_min + (global_wmark_low
                              - global_wmark_min) * wmarkMinAdj Close: [LSR:0, LS:0,
                              BE:0]. Recommended: [LSR:-25, LS:-25, BE:50].'
                            format: int64
                            maximum: 50
                            minimum: -25
                            type: integer
                          wmarkRatio:
                            description: 'wmark_ratio (Anolis OS required) Async memory
                              reclamation is triggered when cgroup memory usage exceeds
                              `memory.wmark_high` and the reclamation stops when usage
                              is below `memory.wmark_low`. Basically, `memory.wmark_high`
                              := min(memory.high, memory.limit_in_bytes) * memory.memory.wmark_ratio
                              `memory.wmark_low` := min(memory.high, memory.limit_in_bytes)
                              * (memory.wmark_ratio - memory.wmark_scale_factor) WmarkRatio
                              specifies `memory.wmark_ratio` that help calculate `memory.wmark_high`,
                              which triggers async memory reclamation when memory
                              usage exceeds. Close: 0. Recommended: 95.'
                            format: int64
                            maximum: 100
                            minimum: 0
                            type: integer
                          wmarkScalePermill:
                            description: 'WmarkScalePermill specifies `memory.wmark_scale_factor`
                              that helps calculate `memory.wmark_low`, which stops
                              async memory reclamation when memory usage belows. Close:
                              50. Recommended: 20.'
                            format: int64
                            maximum: 1000
                            minimum: 1
                            type: integer
                        type: object
                      resctrlQOS:
                        description: ResctrlQOSCfg stores node-level config of resctrl
                          qos
                        properties:
                          catRangeEndPercent:
                            description: LLC available range end for pods by percentage
                            format: int64
                            maximum: 100
                            minimum: 0
                            type: integer
                          catRangeStartPercent:
                            description: LLC available range start for pods by percentage
                            format: int64
                            maximum: 100
                            minimum: 0
                            type: integer
                          enable:
                            description: Enable indicates whether the resctrl qos
                              is enabled.
                            type: boolean
                          mbaPercent:
                            description: MBA percent
                            format: int64
                            maximum: 100
                            minimum: 0
                            type: integer
                        type: object
                    type: object
                  cgroupRoot:
                    description: ResourceQOS for root cgroup.
                    properties:
                      blkioQOS:
                        properties:
                          blocks:
                            items:
                              properties:
                                ioCfg:
                                  properties:
                                    ioWeightPercent:
                                      description: 'This field is used to set the
                                        weight of a sub-group. Default value: 100.
                                        Valid values: 1 to 100.'
                                      format: int64
                                      maximum: 100
                                      minimum: 1
                                      type: integer
                                    readBPS:
                                      description: Throttling of throughput The value
                                        is set to 0, which indicates that the feature
                                        is disabled.
                                      format: int64
                                      minimum: 0
                                      type: integer
                                    readIOPS:
                                      description: Throttling of IOPS The value is
                                        set to 0, which indicates that the feature
                                        is disabled.
                                      format: int64
                                      minimum: 0
                                      type: integer
                                    readLatency:
                                      description: 'Configure the weight-based throttling
                                        feature of blk-iocost Only used for RootClass
                                        After blk-iocost is enabled, the kernel calculates
                                        the proportion of requests that exceed the
                                        read or write latency threshold out of all
                                        requests. When the proportion is greater than
                                        the read or write latency percentile (95%),
                                        the kernel considers the disk to be saturated
                                        and reduces the rate at which requests are
                                        sent to the disk. the read latency threshold.
                                        Unit: microseconds.'
                                      format: int64
                                      type: integer
                                    writeBPS:
                                      format: int64
                                      minimum: 0
                                      type: integer
                                    writeIOPS:
                                      format: int64
                                      minimum: 0
                                      type: integer
                                    writeLatency:
                                      description: 'the write latency threshold. Unit:
                                        microseconds.'
                                      format: int64
                                      type: integer
                                  type: object
                                name:
                                  type: string
                                type:
                                  type: string
                              type: object
                            type: array
                          enable:
                            type: boolean
                        type: object
                      cpuQOS:
                        description: CPUQOSCfg stores node-level config of cpu qos
                        properties:
                          enable:
                            description: Enable indicates whether the cpu qos is enabled.
                            type: boolean
                          groupIdentity:
                            description: group identity value for pods, default =
                              0
                            format: int64
                            type: integer
                        type: object
                      memoryQOS:
                        description: MemoryQOSCfg stores node-level config of memory
                          qos
                        properties:
                          enable:
                            description: 'Enable indicates whether the memory qos
                              is enabled (default: false). This field is used for
                              node-level control, while pod-level configuration is
                              done with MemoryQOS and `Policy` instead of an `Enable`
                              option. Please view the differences between MemoryQOSCfg
                              and PodMemoryQOSConfig structs.'
                            type: boolean
                          lowLimitPercent:
                            description: 'LowLimitPercent specifies the lowLimitFactor
                              percentage to calculate `memory.low`, which TRIES BEST
                              protecting memory from global reclamation when memory
                              usage does not exceed the low limit unless no unprotected
                              memcg can be reclaimed. NOTE: `memory.low` should be
                              larger than `memory.min`. If spec.requests.memory ==
                              spec.limits.memory, pod `memory.low` and `memory.high`
                              become invalid, while `memory.wmark_ratio` is still
                              in effect. Close: 0.'
                            format: int64
                            minimum: 0
                            type: integer
                          minLimitPercent:
                            description: 'memcg qos If enabled, memcg qos will be
                              set by the agent, where some fields are implicitly calculated
                              from pod spec. 1. `memory.min` := spec.requests.memory
                              * minLimitFactor / 100 (use 0 if requests.memory is
                              not set) 2. `memory.low` := spec.requests.memory * lowLimitFactor
                              / 100 (use 0 if requests.memory is not set) 3. `memory.limit_in_bytes`
                              := spec.limits.memory (set $node.allocatable.memory
                              if limits.memory is not set) 4. `memory.high` := floor[(spec.requests.memory
                              + throttlingFactor / 100 * (memory.limit_in_bytes or
                              node allocatable memory - spec.requests.memory))/pageSize]
                              * pageSize MinLimitPercent specifies the minLimitFactor
                              percentage to calculate `memory.min`, which protects
                              memory from global reclamation when memory usage does
                              not exceed the min limit. Close: 0.'
                            format: int64
                            minimum: 0
                            type: integer
                          oomKillGroup:
                            format: int64
                            type: integer
                          priority:
                            format: int64
                            type: integer
                          priorityEnable:
                            description: 'TODO: enhance the usages of oom priority
                              and oom kill group'
                            format: int64
                            type: integer
                          throttlingPercent:
                            description: 'ThrottlingPercent specifies the throttlingFactor
                              percentage to calculate `memory.high` with pod memory.limits
                              or node allocatable memory, which triggers memcg direct
                              reclamation when memory usage exceeds. Lower the factor
                              brings more heavier reclaim pressure. Close: 0.'
                            format: int64
                            minimum: 0
                            type: integer
                          wmarkMinAdj:
                            description: 'wmark_min_adj (Anolis OS required) WmarkMinAdj
                              specifies `memory.wmark_min_adj` which adjusts per-memcg
                              threshold for global memory reclamation. Lower the factor
                              brings later reclamation. The adjustment uses different
                              formula for different value range. [-25, 0)：global_wmark_min''
                              = global_wmark_min + (global_wmark_min - 0) * wmarkMinAdj
                              (0, 50]：global_wmark_min'' = global_wmark_min + (global_wmark_low
                              - global_wmark_min) * wmarkMinAdj Close: [LSR:0, LS:0,
                              BE:0]. Recommended: [LSR:-25, LS:-25, BE:50].'
                            format: int64
                            maximum: 50
                            minimum: -25
                            type: integer
                          wmarkRatio:
                            description: 'wmark_ratio (Anolis OS required) Async memory
                              reclamation is triggered when cgroup memory usage exceeds
                              `memory.wmark_high` and the reclamation stops when usage
                              is below `memory.wmark_low`. Basically, `memory.wmark_high`
                              := min(memory.high, memory.limit_in_bytes) * memory.memory.wmark_ratio
                              `memory.wmark_low` := min(memory.high, memory.limit_in_bytes)
                              * (memory.wmark_ratio - memory.wmark_scale_factor) WmarkRatio
                              specifies `memory.wmark_ratio` that help calculate `memory.wmark_high`,
                              which triggers async memory reclamation when memory
                              usage exceeds. Close: 0. Recommended: 95.'
                            format: int64
                            maximum: 100
                            minimum: 0
                            type: integer
                          wmarkScalePermill:
                            description: 'WmarkScalePermill specifies `memory.wmark_scale_factor`
                              that helps calculate `memory.wmark_low`, which stops
                              async memory reclamation when memory usage belows. Close:
                              50. Recommended: 20.'
                            format: int64
                            maximum: 1000
                            minimum: 1
                            type: integer
                        type: object
                      resctrlQOS:
                        description: ResctrlQOSCfg stores node-level config of resctrl
                          qos
                        properties:
                          catRangeEndPercent:
                            description: LLC available range end for pods by percentage
                            format: int64
                            maximum: 100
                            minimum: 0
                            type: integer
                          catRangeStartPercent:
                            description: LLC available range start for pods by percentage
                            format: int64
                            maximum: 100
                            minimum: 0
                            type: integer
                          enable:
                            description: Enable indicates whether the resctrl qos
                              is enabled.
                            type: boolean
                          mbaPercent:
                            description: MBA percent
                            format: int64
                            maximum: 100
                            minimum: 0
                            type: integer
                        type: object
                    type: object
                  lsClass:
                    description: ResourceQOS for LS pods.
                    properties:
                      blkioQOS:
                        properties:
                          blocks:
                            items:
                              properties:
                                ioCfg:
                                  properties:
                                    ioWeightPercent:
                                      description: 'This field is used to set the
                                        weight of a sub-group. Default value: 100.
                                        Valid values: 1 to 100.'
                                      format: int64
                                      maximum: 100
                                      minimum: 1
                                      type: integer
                                    readBPS:
                                      description: Throttling of throughput The value
                                        is set to 0, which indicates that the feature
                                        is disabled.
                                      format: int64
                                      minimum: 0
                                      type: integer
                                    readIOPS:
                                      description: Throttling of IOPS The value is
                                        set to 0, which indicates that the feature
                                        is disabled.
                                      format: int64
                                      minimum: 0
                                      type: integer
                                    readLatency:
                                      description: 'Configure the weight-based throttling
                                        feature of blk-iocost Only used for RootClass
                                        After blk-iocost is enabled, the kernel calculates
                                        the proportion of requests that exceed the
                                        read or write latency threshold out of all
                                        requests. When the proportion is greater than
                                        the read or write latency percentile (95%),
                                        the kernel considers the disk to be saturated
                                        and reduces the rate at which requests are
                                        sent to the disk. the read latency threshold.
                                        Unit: microseconds.'
                                      format: int64
                                      type: integer
                                    writeBPS:
                                      format: int64
                                      minimum: 0
                                      type: integer
                                    writeIOPS:
                                      format: int64
                                      minimum: 0
                                      type: integer
                                    writeLatency:
                                      description: 'the write latency threshold. Unit:
                                        microseconds.'
                                      format: int64
                                      type: integer
                                  type: object
                                name:
                                  type: string
                                type:
                                  type: string
                              type: object
                            type: array
                          enable:
                            type: boolean
                        type: object
                      cpuQOS:
                        description: CPUQOSCfg stores node-level config of cpu qos
                        properties:
                          enable:
                            description: Enable indicates whether the cpu qos is enabled.
                            type: boolean
                          groupIdentity:
                            description: group identity value for pods, default =
                              0
                            format: int64
                            type: integer
                        type: object
                      memoryQOS:
                        description: MemoryQOSCfg stores node-level config of memory
                          qos
                        properties:
                          enable:
                            description: 'Enable indicates whether the memory qos
                              is enabled (default: false). This field is used for
                              node-level control, while pod-level configuration is
                              done with MemoryQOS and `Policy` instead of an `Enable`
                              option. Please view the differences between MemoryQOSCfg
                              and PodMemoryQOSConfig structs.'
                            type: boolean
                          lowLimitPercent:
                            description: 'LowLimitPercent specifies the lowLimitFactor
                              percentage to calculate `memory.low`, which TRIES BEST
                              protecting memory from global reclamation when memory
                              usage does not exceed the low limit unless no unprotected
                              memcg can be reclaimed. NOTE: `memory.low` should be
                              larger than `memory.min`. If spec.requests.memory ==
                              spec.limits.memory, pod `memory.low` and `memory.high`
                              become invalid, while `memory.wmark_ratio` is still
                              in effect. Close: 0.'
                            format: int64
                            minimum: 0
                            type: integer
                          minLimitPercent:
                            description: 'memcg qos If enabled, memcg qos will be
                              set by the agent, where some fields are implicitly calculated
                              from pod spec. 1. `memory.min` := spec.requests.memory
                              * minLimitFactor / 100 (use 0 if requests.memory is
                              not set) 2. `memory.low` := spec.requests.memory * lowLimitFactor
                              / 100 (use 0 if requests.memory is not set) 3. `memory.limit_in_bytes`
                              := spec.limits.memory (set $node.allocatable.memory
                              if limits.memory is not set) 4. `memory.high` := floor[(spec.requests.memory
                              + throttlingFactor / 100 * (memory.limit_in_bytes or
                              node allocatable memory - spec.requests.memory))/pageSize]
                              * pageSize MinLimitPercent specifies the minLimitFactor
                              percentage to calculate `memory.min`, which protects
                              memory from global reclamation when memory usage does
                              not exceed the min limit. Close: 0.'
                            format: int64
                            minimum: 0
                            type: integer
                          oomKillGroup:
                            format: int64
                            type: integer
                          priority:
                            format: int64
                            type: integer
                          priorityEnable:
                            description: 'TODO: enhance the usages of oom priority
                              and oom kill group'
                            format: int64
                            type: integer
                          throttlingPercent:
                            description: 'ThrottlingPercent specifies the throttlingFactor
                              percentage to calculate `memory.high` with pod memory.limits
                              or node allocatable memory, which triggers memcg direct
                              reclamation when memory usage exceeds. Lower the factor
                              brings more heavier reclaim pressure. Close: 0.'
                            format: int64
                            minimum: 0
                            type: integer
                          wmarkMinAdj:
                            description: 'wmark_min_adj (Anolis OS required) WmarkMinAdj
                              specifies `memory.wmark_min_adj` which adjusts per-memcg
                              threshold for global memory reclamation. Lower the factor
                              brings later reclamation. The adjustment uses different
                              formula for different value range. [-25, 0)：global_wmark_min''
                              = global_wmark_min + (global_wmark_min - 0) * wmarkMinAdj
                              (0, 50]：global_wmark_min'' = global_wmark_min + (global_wmark_low
                              - global_wmark_min) * wmarkMinAdj Close: [LSR:0, LS:0,
                              BE:0]. Recommended: [LSR:-25, LS:-25, BE:50].'
                            format: int64
                            maximum: 50
                            minimum: -25
                            type: integer
                          wmarkRatio:
                            description: 'wmark_ratio (Anolis OS required) Async memory
                              reclamation is triggered when cgroup memory usage exceeds
                              `memory.wmark_high` and the reclamation stops when usage
                              is below `memory.wmark_low`. Basically, `memory.wmark_high`
                              := min(memory.high, memory.limit_in_bytes) * memory.memory.wmark_ratio
                              `memory.wmark_low` := min(memory.high, memory.limit_in_bytes)
                              * (memory.wmark_ratio - memory.wmark_scale_factor) WmarkRatio
                              specifies `memory.wmark_ratio` that help calculate `memory.wmark_high`,
                              which triggers async memory reclamation when memory
                              usage exceeds. Close: 0. Recommended: 95.'
                            format: int64
                            maximum: 100
                            minimum: 0
                            type: integer
                          wmarkScalePermill:
                            description: 'WmarkScalePermill specifies `memory.wmark_scale_factor`
                              that helps calculate `memory.wmark_low`, which stops
                              async memory reclamation when memory usage belows. Close:
                              50. Recommended: 20.'
                            format: int64
                            maximum: 1000
                            minimum: 1
                            type: integer
                        type: object
                      resctrlQOS:
                        description: ResctrlQOSCfg stores node-level config of resctrl
                          qos
                        properties:
                          catRangeEndPercent:
                            description: LLC available range end for pods by percentage
                            format: int64
                            maximum: 100
                            minimum: 0
                            type: integer
                          catRangeStartPercent:
                            description: LLC available range start for pods by percentage
                            format: int64
                            maximum: 100
                            minimum: 0
                            type: integer
                          enable:
                            description: Enable indicates whether the resctrl qos
                              is enabled.
                            type: boolean
                          mbaPercent:
                            description: MBA percent
                            format: int64
                            maximum: 100
                            minimum: 0
                            type: integer
                        type: object
                    type: object
                  lsrClass:
                    description: ResourceQOS for LSR pods.
                    properties:
                      blkioQOS:
                        properties:
                          blocks:
                            items:
                              properties:
                                ioCfg:
                                  properties:
                                    ioWeightPercent:
                                      description: 'This field is used to set the
                                        weight of a sub-group. Default value: 100.
                                        Valid values: 1 to 100.'
                                      format: int64
                                      maximum: 100
                                      minimum: 1
                                      type: integer
                                    readBPS:
                                      description: Throttling of throughput The value
                                        is set to 0, which indicates that the feature
                                        is disabled.
                                      format: int64
                                      minimum: 0
                                      type: integer
                                    readIOPS:
                                      description: Throttling of IOPS The value is
                                        set to 0, which indicates that the feature
                                        is disabled.
                                      format: int64
                                      minimum: 0
                                      type: integer
                                    readLatency:
                                      description: 'Configure the weight-based throttling
                                        feature of blk-iocost Only used for RootClass
                                        After blk-iocost is enabled, the kernel calculates
                                        the proportion of requests that exceed the
                                        read or write latency threshold out of all
                                        requests. When the proportion is greater than
                                        the read or write latency percentile (95%),
                                        the kernel considers the disk to be saturated
                                        and reduces the rate at which requests are
                                        sent to the disk. the read latency threshold.
                                        Unit: microseconds.'
                                      format: int64
                                      type: integer
                                    writeBPS:
                                      format: int64
                                      minimum: 0
                                      type: integer
                                    writeIOPS:
                                      format: int64
                                      minimum: 0
                                      type: integer
                                    writeLatency:
                                      description: 'the write latency threshold. Unit:
                                        microseconds.'
                                      format: int64
                                      type: integer
                                  type: object
                                name:
                                  type: string
                                type:
                                  type: string
                              type: object
                            type: array
                          enable:
                            type: boolean
                        type: object
                      cpuQOS:
                        description: CPUQOSCfg stores node-level config of cpu qos
                        properties:
                          enable:
                            description: Enable indicates whether the cpu qos is enabled.
                            type: boolean
                          groupIdentity:
                            description: group identity value for pods, default =
                              0
                            format: int64
                            type: integer
                        type: object
                      memoryQOS:
                        description: MemoryQOSCfg stores node-level config of memory
                          qos
                        properties:
                          enable:
                            description: 'Enable indicates whether the memory qos
                              is enabled (default: false). This field is used for
                              node-level control, while pod-level configuration is
                              done with MemoryQOS and `Policy` instead of an `Enable`
                              option. Please view the differences between MemoryQOSCfg
                              and PodMemoryQOSConfig structs.'
                            type: boolean
                          lowLimitPercent:
                            description: 'LowLimitPercent specifies the lowLimitFactor
                              percentage to calculate `memory.low`, which TRIES BEST
                              protecting memory from global reclamation when memory
                              usage does not exceed the low limit unless no unprotected
                              memcg can be reclaimed. NOTE: `memory.low` should be
                              larger than `memory.min`. If spec.requests.memory ==
                              spec.limits.memory, pod `memory.low` and `memory.high`
                              become invalid, while `memory.wmark_ratio` is still
                              in effect. Close: 0.'
                            format: int64
                            minimum: 0
                            type: integer
                          minLimitPercent:
                            description: 'memcg qos If enabled, memcg qos will be
                              set by the agent, where some fields are implicitly calculated
                              from pod spec. 1. `memory.min` := spec.requests.memory
                              * minLimitFactor / 100 (use 0 if requests.memory is
                              not set) 2. `memory.low` := spec.requests.memory * lowLimitFactor
                              / 100 (use 0 if requests.memory is not set) 3. `memory.limit_in_bytes`
                              := spec.limits.memory (set $node.allocatable.memory
                              if limits.memory is not set) 4. `memory.high` := floor[(spec.requests.memory
                              + throttlingFactor / 100 * (memory.limit_in_bytes or
                              node allocatable memory - spec.requests.memory))/pageSize]
                              * pageSize MinLimitPercent specifies the minLimitFactor
                              percentage to calculate `memory.min`, which protects
                              memory from global reclamation when memory usage does
                              not exceed the min limit. Close: 0.'
                            format: int64
                            minimum: 0
                            type: integer
                          oomKillGroup:
                            format: int64
                            type: integer
                          priority:
                            format: int64
                            type: integer
                          priorityEnable:
                            description: 'TODO: enhance the usages of oom priority
                              and oom kill group'
                            format: int64
                            type: integer
                          throttlingPercent:
                            description: 'ThrottlingPercent specifies the throttlingFactor
                              percentage to calculate `memory.high` with pod memory.limits
                              or node allocatable memory, which triggers memcg direct
                              reclamation when memory usage exceeds. Lower the factor
                              brings more heavier reclaim pressure. Close: 0.'
                            format: int64
                            minimum: 0
                            type: integer
                          wmarkMinAdj:
                            description: 'wmark_min_adj (Anolis OS required) WmarkMinAdj
                              specifies `memory.wmark_min_adj` which adjusts per-memcg
                              threshold for global memory reclamation. Lower the factor
                              brings later reclamation. The adjustment uses different
                              formula for different value range. [-25, 0)：global_wmark_min''
                              = global_wmark_min + (global_wmark_min - 0) * wmarkMinAdj
                              (0, 50]：global_wmark_min'' = global_wmark_min + (global_wmark_low
                              - global_wmark_min) * wmarkMinAdj Close: [LSR:0, LS:0,
                              BE:0]. Recommended: [LSR:-25, LS:-25, BE:50].'
                            format: int64
                            maximum: 50
                            minimum: -25
                            type: integer
                          wmarkRatio:
                            description: 'wmark_ratio (Anolis OS required) Async memory
                              reclamation is triggered when cgroup memory usage exceeds
                              `memory.wmark_high` and the reclamation stops when usage
                              is below `memory.wmark_low`. Basically, `memory.wmark_high`
                              := min(memory.high, memory.limit_in_bytes) * memory.memory.wmark_ratio
                              `memory.wmark_low` := min(memory.high, memory.limit_in_bytes)
                              * (memory.wmark_ratio - memory.wmark_scale_factor) WmarkRatio
                              specifies `memory.wmark_ratio` that help calculate `memory.wmark_high`,
                              which triggers async memory reclamation when memory
                              usage exceeds. Close: 0. Recommended: 95.'
                            format: int64
                            maximum: 100
                            minimum: 0
                            type: integer
                          wmarkScalePermill:
                            description: 'WmarkScalePermill specifies `memory.wmark_scale_factor`
                              that helps calculate `memory.wmark_low`, which stops
                              async memory reclamation when memory usage belows. Close:
                              50. Recommended: 20.'
                            format: int64
                            maximum: 1000
                            minimum: 1
                            type: integer
                        type: object
                      resctrlQOS:
                        description: ResctrlQOSCfg stores node-level config of resctrl
                          qos
                        properties:
                          catRangeEndPercent:
                            description: LLC available range end for pods by percentage
                            format: int64
                            maximum: 100
                            minimum: 0
                            type: integer
                          catRangeStartPercent:
                            description: LLC available range start for pods by percentage
                            format: int64
                            maximum: 100
                            minimum: 0
                            type: integer
                          enable:
                            description: Enable indicates whether the resctrl qos
                              is enabled.
                            type: boolean
                          mbaPercent:
                            description: MBA percent
                            format: int64
                            maximum: 100
                            minimum: 0
                            type: integer
                        type: object
                    type: object
                  systemClass:
                    description: ResourceQOS for system pods
                    properties:
                      blkioQOS:
                        properties:
                          blocks:
                            items:
                              properties:
                                ioCfg:
                                  properties:
                                    ioWeightPercent:
                                      description: 'This field is used to set the
                                        weight of a sub-group. Default value: 100.
                                        Valid values: 1 to 100.'
                                      format: int64
                                      maximum: 100
                                      minimum: 1
                                      type: integer
                                    readBPS:
                                      description: Throttling of throughput The value
                                        is set to 0, which indicates that the feature
                                        is disabled.
                                      format: int64
                                      minimum: 0
                                      type: integer
                                    readIOPS:
                                      description: Throttling of IOPS The value is
                                        set to 0, which indicates that the feature
                                        is disabled.
                                      format: int64
                                      minimum: 0
                                      type: integer
                                    readLatency:
                                      description: 'Configure the weight-based throttling
                                        feature of blk-iocost Only used for RootClass
                                        After blk-iocost is enabled, the kernel calculates
                                        the proportion of requests that exceed the
                                        read or write latency threshold out of all
                                        requests. When the proportion is greater than
                                        the read or write latency percentile (95%),
                                        the kernel considers the disk to be saturated
                                        and reduces the rate at which requests are
                                        sent to the disk. the read latency threshold.
                                        Unit: microseconds.'
                                      format: int64
                                      type: integer
                                    writeBPS:
                                      format: int64
                                      minimum: 0
                                      type: integer
                                    writeIOPS:
                                      format: int64
                                      minimum: 0
                                      type: integer
                                    writeLatency:
                                      description: 'the write latency threshold. Unit:
                                        microseconds.'
                                      format: int64
                                      type: integer
                                  type: object
                                name:
                                  type: string
                                type:
                                  type: string
                              type: object
                            type: array
                          enable:
                            type: boolean
                        type: object
                      cpuQOS:
                        description: CPUQOSCfg stores node-level config of cpu qos
                        properties:
                          enable:
                            description: Enable indicates whether the cpu qos is enabled.
                            type: boolean
                          groupIdentity:
                            description: group identity value for pods, default =
                              0
                            format: int64
                            type: integer
                        type: object
                      memoryQOS:
                        description: MemoryQOSCfg stores node-level config of memory
                          qos
                        properties:
                          enable:
                            description: 'Enable indicates whether the memory qos
                              is enabled (default: false). This field is used for
                              node-level control, while pod-level configuration is
                              done with MemoryQOS and `Policy` instead of an `Enable`
                              option. Please view the differences between MemoryQOSCfg
                              and PodMemoryQOSConfig structs.'
                            type: boolean
                          lowLimitPercent:
                            description: 'LowLimitPercent specifies the lowLimitFactor
                              percentage to calculate `memory.low`, which TRIES BEST
                              protecting memory from global reclamation when memory
                              usage does not exceed the low limit unless no unprotected
                              memcg can be reclaimed. NOTE: `memory.low` should be
                              larger than `memory.min`. If spec.requests.memory ==
                              spec.limits.memory, pod `memory.low` and `memory.high`
                              become invalid, while `memory.wmark_ratio` is still
                              in effect. Close: 0.'
                            format: int64
                            minimum: 0
                            type: integer
                          minLimitPercent:
                            description: 'memcg qos If enabled, memcg qos will be
                              set by the agent, where some fields are implicitly calculated
                              from pod spec. 1. `memory.min` := spec.requests.memory
                              * minLimitFactor / 100 (use 0 if requests.memory is
                              not set) 2. `memory.low` := spec.requests.memory * lowLimitFactor
                              / 100 (use 0 if requests.memory is not set) 3. `memory.limit_in_bytes`
                              := spec.limits.memory (set $node.allocatable.memory
                              if limits.memory is not set) 4. `memory.high` := floor[(spec.requests.memory
                              + throttlingFactor / 100 * (memory.limit_in_bytes or
                              node allocatable memory - spec.requests.memory))/pageSize]
                              * pageSize MinLimitPercent specifies the minLimitFactor
                              percentage to calculate `memory.min`, which protects
                              memory from global reclamation when memory usage does
                              not exceed the min limit. Close: 0.'
                            format: int64
                            minimum: 0
                            type: integer
                          oomKillGroup:
                            format: int64
                            type: integer
                          priority:
                            format: int64
                            type: integer
                          priorityEnable:
                            description: 'TODO: enhance the usages of oom priority
                              and oom kill group'
                            format: int64
                            type: integer
                          throttlingPercent:
                            description: 'ThrottlingPercent specifies the throttlingFactor
                              percentage to calculate `memory.high` with pod memory.limits
                              or node allocatable memory, which triggers memcg direct
                              reclamation when memory usage exceeds. Lower the factor
                              brings more heavier reclaim pressure. Close: 0.'
                            format: int64
                            minimum: 0
                            type: integer
                          wmarkMinAdj:
                            description: 'wmark_min_adj (Anolis OS required) WmarkMinAdj
                              specifies `memory.wmark_min_adj` which adjusts per-memcg
                              threshold for global memory reclamation. Lower the factor
                              brings later reclamation. The adjustment uses different
                              formula for different value range. [-25, 0)：global_wmark_min''
                              = global_wmark_min + (global_wmark_min - 0) * wmarkMinAdj
                              (0, 50]：global_wmark_min'' = global_wmark_min + (global_wmark_low
                              - global_wmark_min) * wmarkMinAdj Close: [LSR:0, LS:0,
                              BE:0]. Recommended: [LSR:-25, LS:-25, BE:50].'
                            format: int64
                            maximum: 50
                            minimum: -25
                            type: integer
                          wmarkRatio:
                            description: 'wmark_ratio (Anolis OS required) Async memory
                              reclamation is triggered when cgroup memory usage exceeds
                              `memory.wmark_high` and the reclamation stops when usage
                              is below `memory.wmark_low`. Basically, `memory.wmark_high`
                              := min(memory.high, memory.limit_in_bytes) * memory.memory.wmark_ratio
                              `memory.wmark_low` := min(memory.high, memory.limit_in_bytes)
                              * (memory.wmark_ratio - memory.wmark_scale_factor) WmarkRatio
                              specifies `memory.wmark_ratio` that help calculate `memory.wmark_high`,
                              which triggers async memory reclamation when memory
                              usage exceeds. Close: 0. Recommended: 95.'
                            format: int64
                            maximum: 100
                            minimum: 0
                            type: integer
                          wmarkScalePermill:
                            description: 'WmarkScalePermill specifies `memory.wmark_scale_factor`
                              that helps calculate `memory.wmark_low`, which stops
                              async memory reclamation when memory usage belows. Close:
                              50. Recommended: 20.'
                            format: int64
                            maximum: 1000
                            minimum: 1
                            type: integer
                        type: object
                      resctrlQOS:
                        description: ResctrlQOSCfg stores node-level config of resctrl
                          qos
                        properties:
                          catRangeEndPercent:
                            description: LLC available range end for pods by percentage
                            format: int64
                            maximum: 100
                            minimum: 0
                            type: integer
                          catRangeStartPercent:
                            description: LLC available range start for pods by percentage
                            format: int64
                            maximum: 100
                            minimum: 0
                            type: integer
                          enable:
                            description: Enable indicates whether the resctrl qos
                              is enabled.
                            type: boolean
                          mbaPercent:
                            description: MBA percent
                            format: int64
                            maximum: 100
                            minimum: 0
                            type: integer
                        type: object
                    type: object
                type: object
              resourceUsedThresholdWithBE:
                description: BE pods will be limited if node resource usage overload
                properties:
                  cpuEvictBESatisfactionLowerPercent:
                    description: be.satisfactionRate = be.CPURealLimit/be.CPURequest;
                      be.cpuUsage = be.CPUUsed/be.CPURealLimit if be.satisfactionRate
                      < CPUEvictBESatisfactionLowerPercent/100 && be.usage >= CPUEvictBEUsageThresholdPercent/100,
                      then start to evict pod, and will evict to ${CPUEvictBESatisfactionUpperPercent}
                    format: int64
                    type: integer
                  cpuEvictBESatisfactionUpperPercent:
                    description: be.satisfactionRate = be.CPURealLimit/be.CPURequest
                      if be.satisfactionRate > CPUEvictBESatisfactionUpperPercent/100,
                      then stop to evict.
                    format: int64
                    type: integer
                  cpuEvictBEUsageThresholdPercent:
                    description: if be.cpuUsage >= CPUEvictBEUsageThresholdPercent/100,
                      then start to calculate the resources need to be released.
                    format: int64
                    type: integer
                  cpuEvictPolicy:
                    description: 'CPUEvictPolicy defines the policy for the BECPUEvict
                      feature. Default: `evictByRealLimit`.'
                    type: string
                  cpuEvictTimeWindowSeconds:
                    description: when avg(cpuusage) > CPUEvictThresholdPercent, will
                      start to evict pod by cpu, and avg(cpuusage) is calculated based
                      on the most recent CPUEvictTimeWindowSeconds data
                    format: int64
                    type: integer
                  cpuSuppressPolicy:
                    description: CPUSuppressPolicy
                    type: string
                  cpuSuppressThresholdPercent:
                    description: cpu suppress threshold percentage (0,100), default
                      = 65
                    format: int64
                    maximum: 100
                    minimum: 0
                    type: integer
                  enable:
                    description: whether the strategy is enabled, default = false
                    type: boolean
                  memoryEvictLowerPercent:
                    description: 'lower: memory release util usage under MemoryEvictLowerPercent,
                      default = MemoryEvictThresholdPercent - 2'
                    format: int64
                    maximum: 100
                    minimum: 0
                    type: integer
                  memoryEvictThresholdPercent:
                    description: 'upper: memory evict threshold percentage (0,100),
                      default = 70'
                    format: int64
                    maximum: 100
                    minimum: 0
                    type: integer
                type: object
              systemStrategy:
                description: node global system config
                properties:
                  memcgReapBackGround:
                    description: /sys/kernel/mm/memcg_reaper/reap_background
                    format: int64
                    type: integer
                  minFreeKbytesFactor:
                    description: for /proc/sys/vm/min_free_kbytes, min_free_kbytes
                      = minFreeKbytesFactor * nodeTotalMemory /10000
                    format: int64
                    type: integer
                  watermarkScaleFactor:
                    description: /proc/sys/vm/watermark_scale_factor
                    format: int64
                    type: integer
                type: object
            type: object
          status:
            description: NodeSLOStatus defines the observed state of NodeSLO
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
