/*
Copyright 2022 The Koordinator Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/koordinator-sh/koordinator/apis/scheduling/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ScheduleExplanationLister helps list ScheduleExplanations.
// All objects returned here must be treated as read-only.
type ScheduleExplanationLister interface {
	// List lists all ScheduleExplanations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ScheduleExplanation, err error)
	// ScheduleExplanations returns an object that can list and get ScheduleExplanations.
	ScheduleExplanations(namespace string) ScheduleExplanationNamespaceLister
	ScheduleExplanationListerExpansion
}

// scheduleExplanationLister implements the ScheduleExplanationLister interface.
type scheduleExplanationLister struct {
	indexer cache.Indexer
}

// NewScheduleExplanationLister returns a new ScheduleExplanationLister.
func NewScheduleExplanationLister(indexer cache.Indexer) ScheduleExplanationLister {
	return &scheduleExplanationLister{indexer: indexer}
}

// List lists all ScheduleExplanations in the indexer.
func (s *scheduleExplanationLister) List(selector labels.Selector) (ret []*v1alpha1.ScheduleExplanation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ScheduleExplanation))
	})
	return ret, err
}

// ScheduleExplanations returns an object that can list and get ScheduleExplanations.
func (s *scheduleExplanationLister) ScheduleExplanations(namespace string) ScheduleExplanationNamespaceLister {
	return scheduleExplanationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ScheduleExplanationNamespaceLister helps list and get ScheduleExplanations.
// All objects returned here must be treated as read-only.
type ScheduleExplanationNamespaceLister interface {
	// List lists all ScheduleExplanations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ScheduleExplanation, err error)
	// Get retrieves the ScheduleExplanation from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ScheduleExplanation, error)
	ScheduleExplanationNamespaceListerExpansion
}

// scheduleExplanationNamespaceLister implements the ScheduleExplanationNamespaceLister
// interface.
type scheduleExplanationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ScheduleExplanations in the indexer for a given namespace.
func (s scheduleExplanationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ScheduleExplanation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ScheduleExplanation))
	})
	return ret, err
}

// Get retrieves the ScheduleExplanation from the indexer for a given namespace and name.
func (s scheduleExplanationNamespaceLister) Get(name string) (*v1alpha1.ScheduleExplanation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("scheduleexplanation"), name)
	}
	return obj.(*v1alpha1.ScheduleExplanation), nil
}
