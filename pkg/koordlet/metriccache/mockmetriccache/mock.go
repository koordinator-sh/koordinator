/*
Copyright 2022 The Koordinator Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
//

// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/koordlet/metriccache/metric_cache.go

// Package mock_metriccache is a generated GoMock package.
package mock_metriccache

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	metriccache "github.com/koordinator-sh/koordinator/pkg/koordlet/metriccache"
)

// MockMetricCache is a mock of MetricCache interface.
type MockMetricCache struct {
	ctrl     *gomock.Controller
	recorder *MockMetricCacheMockRecorder
}

// MockMetricCacheMockRecorder is the mock recorder for MockMetricCache.
type MockMetricCacheMockRecorder struct {
	mock *MockMetricCache
}

// NewMockMetricCache creates a new mock instance.
func NewMockMetricCache(ctrl *gomock.Controller) *MockMetricCache {
	mock := &MockMetricCache{ctrl: ctrl}
	mock.recorder = &MockMetricCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricCache) EXPECT() *MockMetricCacheMockRecorder {
	return m.recorder
}

// Appender mocks base method.
func (m *MockMetricCache) Appender() metriccache.Appender {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Appender")
	ret0, _ := ret[0].(metriccache.Appender)
	return ret0
}

// Appender indicates an expected call of Appender.
func (mr *MockMetricCacheMockRecorder) Appender() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Appender", reflect.TypeOf((*MockMetricCache)(nil).Appender))
}

// Close mocks base method.
func (m *MockMetricCache) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockMetricCacheMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMetricCache)(nil).Close))
}

// Get mocks base method.
func (m *MockMetricCache) Get(key interface{}) (interface{}, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockMetricCacheMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMetricCache)(nil).Get), key)
}

// GetBECPUResourceMetric mocks base method.
func (m *MockMetricCache) GetBECPUResourceMetric(param *metriccache.QueryParam) metriccache.BECPUResourceQueryResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBECPUResourceMetric", param)
	ret0, _ := ret[0].(metriccache.BECPUResourceQueryResult)
	return ret0
}

// GetBECPUResourceMetric indicates an expected call of GetBECPUResourceMetric.
func (mr *MockMetricCacheMockRecorder) GetBECPUResourceMetric(param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBECPUResourceMetric", reflect.TypeOf((*MockMetricCache)(nil).GetBECPUResourceMetric), param)
}

// InsertBECPUResourceMetric mocks base method.
func (m *MockMetricCache) InsertBECPUResourceMetric(t time.Time, metric *metriccache.BECPUResourceMetric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBECPUResourceMetric", t, metric)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertBECPUResourceMetric indicates an expected call of InsertBECPUResourceMetric.
func (mr *MockMetricCacheMockRecorder) InsertBECPUResourceMetric(t, metric interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBECPUResourceMetric", reflect.TypeOf((*MockMetricCache)(nil).InsertBECPUResourceMetric), t, metric)
}

// Querier mocks base method.
func (m *MockMetricCache) Querier(startTime, endTime time.Time) (metriccache.Querier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Querier", startTime, endTime)
	ret0, _ := ret[0].(metriccache.Querier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Querier indicates an expected call of Querier.
func (mr *MockMetricCacheMockRecorder) Querier(startTime, endTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Querier", reflect.TypeOf((*MockMetricCache)(nil).Querier), startTime, endTime)
}

// Run mocks base method.
func (m *MockMetricCache) Run(stopCh <-chan struct{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", stopCh)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockMetricCacheMockRecorder) Run(stopCh interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockMetricCache)(nil).Run), stopCh)
}

// Set mocks base method.
func (m *MockMetricCache) Set(key, value interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", key, value)
}

// Set indicates an expected call of Set.
func (mr *MockMetricCacheMockRecorder) Set(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockMetricCache)(nil).Set), key, value)
}
