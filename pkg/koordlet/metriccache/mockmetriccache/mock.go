/*
Copyright 2022 The Koordinator Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/koordlet/metriccache/metric_cache.go

// Package mock_metriccache is a generated GoMock package.
package mock_metriccache

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	metriccache "github.com/koordinator-sh/koordinator/pkg/koordlet/metriccache"
)

// MockMetricCache is a mock of MetricCache interface.
type MockMetricCache struct {
	ctrl     *gomock.Controller
	recorder *MockMetricCacheMockRecorder
}

// MockMetricCacheMockRecorder is the mock recorder for MockMetricCache.
type MockMetricCacheMockRecorder struct {
	mock *MockMetricCache
}

// NewMockMetricCache creates a new mock instance.
func NewMockMetricCache(ctrl *gomock.Controller) *MockMetricCache {
	mock := &MockMetricCache{ctrl: ctrl}
	mock.recorder = &MockMetricCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricCache) EXPECT() *MockMetricCacheMockRecorder {
	return m.recorder
}

// GetBECPUResourceMetric mocks base method.
func (m *MockMetricCache) GetBECPUResourceMetric(param *metriccache.QueryParam) metriccache.BECPUResourceQueryResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBECPUResourceMetric", param)
	ret0, _ := ret[0].(metriccache.BECPUResourceQueryResult)
	return ret0
}

// GetBECPUResourceMetric indicates an expected call of GetBECPUResourceMetric.
func (mr *MockMetricCacheMockRecorder) GetBECPUResourceMetric(param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBECPUResourceMetric", reflect.TypeOf((*MockMetricCache)(nil).GetBECPUResourceMetric), param)
}

// GetContainerInterferenceMetric mocks base method.
func (m *MockMetricCache) GetContainerInterferenceMetric(metricName metriccache.InterferenceMetricName, podUID, containerID *string, param *metriccache.QueryParam) metriccache.ContainerInterferenceQueryResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerInterferenceMetric", metricName, podUID, containerID, param)
	ret0, _ := ret[0].(metriccache.ContainerInterferenceQueryResult)
	return ret0
}

// GetContainerInterferenceMetric indicates an expected call of GetContainerInterferenceMetric.
func (mr *MockMetricCacheMockRecorder) GetContainerInterferenceMetric(metricName, podUID, containerID, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerInterferenceMetric", reflect.TypeOf((*MockMetricCache)(nil).GetContainerInterferenceMetric), metricName, podUID, containerID, param)
}

// GetContainerResourceMetric mocks base method.
func (m *MockMetricCache) GetContainerResourceMetric(containerID *string, param *metriccache.QueryParam) metriccache.ContainerResourceQueryResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerResourceMetric", containerID, param)
	ret0, _ := ret[0].(metriccache.ContainerResourceQueryResult)
	return ret0
}

// GetContainerResourceMetric indicates an expected call of GetContainerResourceMetric.
func (mr *MockMetricCacheMockRecorder) GetContainerResourceMetric(containerID, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerResourceMetric", reflect.TypeOf((*MockMetricCache)(nil).GetContainerResourceMetric), containerID, param)
}

// GetContainerThrottledMetric mocks base method.
func (m *MockMetricCache) GetContainerThrottledMetric(containerID *string, param *metriccache.QueryParam) metriccache.ContainerThrottledQueryResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerThrottledMetric", containerID, param)
	ret0, _ := ret[0].(metriccache.ContainerThrottledQueryResult)
	return ret0
}

// GetContainerThrottledMetric indicates an expected call of GetContainerThrottledMetric.
func (mr *MockMetricCacheMockRecorder) GetContainerThrottledMetric(containerID, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerThrottledMetric", reflect.TypeOf((*MockMetricCache)(nil).GetContainerThrottledMetric), containerID, param)
}

// GetNodeCPUInfo mocks base method.
func (m *MockMetricCache) GetNodeCPUInfo(param *metriccache.QueryParam) (*metriccache.NodeCPUInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeCPUInfo", param)
	ret0, _ := ret[0].(*metriccache.NodeCPUInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeCPUInfo indicates an expected call of GetNodeCPUInfo.
func (mr *MockMetricCacheMockRecorder) GetNodeCPUInfo(param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeCPUInfo", reflect.TypeOf((*MockMetricCache)(nil).GetNodeCPUInfo), param)
}

// GetNodeResourceMetric mocks base method.
func (m *MockMetricCache) GetNodeResourceMetric(param *metriccache.QueryParam) metriccache.NodeResourceQueryResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeResourceMetric", param)
	ret0, _ := ret[0].(metriccache.NodeResourceQueryResult)
	return ret0
}

// GetNodeResourceMetric indicates an expected call of GetNodeResourceMetric.
func (mr *MockMetricCacheMockRecorder) GetNodeResourceMetric(param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeResourceMetric", reflect.TypeOf((*MockMetricCache)(nil).GetNodeResourceMetric), param)
}

// GetPodInterferenceMetric mocks base method.
func (m *MockMetricCache) GetPodInterferenceMetric(metricName metriccache.InterferenceMetricName, podUID *string, param *metriccache.QueryParam) metriccache.PodInterferenceQueryResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodInterferenceMetric", metricName, podUID, param)
	ret0, _ := ret[0].(metriccache.PodInterferenceQueryResult)
	return ret0
}

// GetPodInterferenceMetric indicates an expected call of GetPodInterferenceMetric.
func (mr *MockMetricCacheMockRecorder) GetPodInterferenceMetric(metricName, podUID, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodInterferenceMetric", reflect.TypeOf((*MockMetricCache)(nil).GetPodInterferenceMetric), metricName, podUID, param)
}

// GetPodResourceMetric mocks base method.
func (m *MockMetricCache) GetPodResourceMetric(podUID *string, param *metriccache.QueryParam) metriccache.PodResourceQueryResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodResourceMetric", podUID, param)
	ret0, _ := ret[0].(metriccache.PodResourceQueryResult)
	return ret0
}

// GetPodResourceMetric indicates an expected call of GetPodResourceMetric.
func (mr *MockMetricCacheMockRecorder) GetPodResourceMetric(podUID, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodResourceMetric", reflect.TypeOf((*MockMetricCache)(nil).GetPodResourceMetric), podUID, param)
}

// GetPodThrottledMetric mocks base method.
func (m *MockMetricCache) GetPodThrottledMetric(podUID *string, param *metriccache.QueryParam) metriccache.PodThrottledQueryResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodThrottledMetric", podUID, param)
	ret0, _ := ret[0].(metriccache.PodThrottledQueryResult)
	return ret0
}

// GetPodThrottledMetric indicates an expected call of GetPodThrottledMetric.
func (mr *MockMetricCacheMockRecorder) GetPodThrottledMetric(podUID, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodThrottledMetric", reflect.TypeOf((*MockMetricCache)(nil).GetPodThrottledMetric), podUID, param)
}

// InsertBECPUResourceMetric mocks base method.
func (m *MockMetricCache) InsertBECPUResourceMetric(t time.Time, metric *metriccache.BECPUResourceMetric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBECPUResourceMetric", t, metric)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertBECPUResourceMetric indicates an expected call of InsertBECPUResourceMetric.
func (mr *MockMetricCacheMockRecorder) InsertBECPUResourceMetric(t, metric interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBECPUResourceMetric", reflect.TypeOf((*MockMetricCache)(nil).InsertBECPUResourceMetric), t, metric)
}

// InsertContainerInterferenceMetrics mocks base method.
func (m *MockMetricCache) InsertContainerInterferenceMetrics(t time.Time, metric *metriccache.ContainerInterferenceMetric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertContainerInterferenceMetrics", t, metric)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertContainerInterferenceMetrics indicates an expected call of InsertContainerInterferenceMetrics.
func (mr *MockMetricCacheMockRecorder) InsertContainerInterferenceMetrics(t, metric interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertContainerInterferenceMetrics", reflect.TypeOf((*MockMetricCache)(nil).InsertContainerInterferenceMetrics), t, metric)
}

// InsertContainerResourceMetric mocks base method.
func (m *MockMetricCache) InsertContainerResourceMetric(t time.Time, containerResUsed *metriccache.ContainerResourceMetric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertContainerResourceMetric", t, containerResUsed)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertContainerResourceMetric indicates an expected call of InsertContainerResourceMetric.
func (mr *MockMetricCacheMockRecorder) InsertContainerResourceMetric(t, containerResUsed interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertContainerResourceMetric", reflect.TypeOf((*MockMetricCache)(nil).InsertContainerResourceMetric), t, containerResUsed)
}

// InsertContainerThrottledMetrics mocks base method.
func (m *MockMetricCache) InsertContainerThrottledMetrics(t time.Time, metric *metriccache.ContainerThrottledMetric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertContainerThrottledMetrics", t, metric)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertContainerThrottledMetrics indicates an expected call of InsertContainerThrottledMetrics.
func (mr *MockMetricCacheMockRecorder) InsertContainerThrottledMetrics(t, metric interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertContainerThrottledMetrics", reflect.TypeOf((*MockMetricCache)(nil).InsertContainerThrottledMetrics), t, metric)
}

// InsertNodeCPUInfo mocks base method.
func (m *MockMetricCache) InsertNodeCPUInfo(info *metriccache.NodeCPUInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertNodeCPUInfo", info)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertNodeCPUInfo indicates an expected call of InsertNodeCPUInfo.
func (mr *MockMetricCacheMockRecorder) InsertNodeCPUInfo(info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertNodeCPUInfo", reflect.TypeOf((*MockMetricCache)(nil).InsertNodeCPUInfo), info)
}

// InsertNodeResourceMetric mocks base method.
func (m *MockMetricCache) InsertNodeResourceMetric(t time.Time, nodeResUsed *metriccache.NodeResourceMetric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertNodeResourceMetric", t, nodeResUsed)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertNodeResourceMetric indicates an expected call of InsertNodeResourceMetric.
func (mr *MockMetricCacheMockRecorder) InsertNodeResourceMetric(t, nodeResUsed interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertNodeResourceMetric", reflect.TypeOf((*MockMetricCache)(nil).InsertNodeResourceMetric), t, nodeResUsed)
}

// InsertPodResourceMetric mocks base method.
func (m *MockMetricCache) InsertPodResourceMetric(t time.Time, podResUsed *metriccache.PodResourceMetric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertPodResourceMetric", t, podResUsed)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertPodResourceMetric indicates an expected call of InsertPodResourceMetric.
func (mr *MockMetricCacheMockRecorder) InsertPodResourceMetric(t, podResUsed interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertPodResourceMetric", reflect.TypeOf((*MockMetricCache)(nil).InsertPodResourceMetric), t, podResUsed)
}

// InsertPodThrottledMetrics mocks base method.
func (m *MockMetricCache) InsertPodThrottledMetrics(t time.Time, metric *metriccache.PodThrottledMetric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertPodThrottledMetrics", t, metric)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertPodThrottledMetrics indicates an expected call of InsertPodThrottledMetrics.
func (mr *MockMetricCacheMockRecorder) InsertPodThrottledMetrics(t, metric interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertPodThrottledMetrics", reflect.TypeOf((*MockMetricCache)(nil).InsertPodThrottledMetrics), t, metric)
}

// Run mocks base method.
func (m *MockMetricCache) Run(stopCh <-chan struct{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", stopCh)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockMetricCacheMockRecorder) Run(stopCh interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockMetricCache)(nil).Run), stopCh)
}
