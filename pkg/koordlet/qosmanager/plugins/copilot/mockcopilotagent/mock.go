// /*
// Copyright 2022 The Koordinator Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */
//

// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/koordlet/qosmanager/plugins/copilot/copilot_agent.go
//
// Generated by this command:
//
//	mockgen -source pkg/koordlet/qosmanager/plugins/copilot/copilot_agent.go -destination pkg/koordlet/qosmanager/plugins/copilot/mockcopilotagent/mock.go -copyright_file ./hack/boilerplate/boilerplate.go.txt
//

// Package mock_copilot is a generated GoMock package.
package mock_copilot

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/core/v1"
)

// MockCopilotService is a mock of CopilotService interface.
type MockCopilotService struct {
	ctrl     *gomock.Controller
	recorder *MockCopilotServiceMockRecorder
	isgomock struct{}
}

// MockCopilotServiceMockRecorder is the mock recorder for MockCopilotService.
type MockCopilotServiceMockRecorder struct {
	mock *MockCopilotService
}

// NewMockCopilotService creates a new mock instance.
func NewMockCopilotService(ctrl *gomock.Controller) *MockCopilotService {
	mock := &MockCopilotService{ctrl: ctrl}
	mock.recorder = &MockCopilotServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCopilotService) EXPECT() *MockCopilotServiceMockRecorder {
	return m.recorder
}

// KillContainerByResource mocks base method.
func (m *MockCopilotService) KillContainerByResource(nodeCpuRatio, nodeMemoryRatio float64, releaseResource *v1.ResourceList) v1.ResourceList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KillContainerByResource", nodeCpuRatio, nodeMemoryRatio, releaseResource)
	ret0, _ := ret[0].(v1.ResourceList)
	return ret0
}

// KillContainerByResource indicates an expected call of KillContainerByResource.
func (mr *MockCopilotServiceMockRecorder) KillContainerByResource(nodeCpuRatio, nodeMemoryRatio, releaseResource any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KillContainerByResource", reflect.TypeOf((*MockCopilotService)(nil).KillContainerByResource), nodeCpuRatio, nodeMemoryRatio, releaseResource)
}
