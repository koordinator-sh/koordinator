/*
Copyright 2022 The Koordinator Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/koordlet/qosmanager/plugins/util/evict.go

// Package util is a generated GoMock package.
package util

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/core/v1"
)

// MockEvictionExecutor is a mock of EvictionExecutor interface.
type MockEvictionExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockEvictionExecutorMockRecorder
}

// MockEvictionExecutorMockRecorder is the mock recorder for MockEvictionExecutor.
type MockEvictionExecutorMockRecorder struct {
	mock *MockEvictionExecutor
}

// NewMockEvictionExecutor creates a new mock instance.
func NewMockEvictionExecutor(ctrl *gomock.Controller) *MockEvictionExecutor {
	mock := &MockEvictionExecutor{ctrl: ctrl}
	mock.recorder = &MockEvictionExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvictionExecutor) EXPECT() *MockEvictionExecutorMockRecorder {
	return m.recorder
}

// Evict mocks base method.
func (m *MockEvictionExecutor) Evict(pod *v1.Pod, node *v1.Node, releaseReason, message string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Evict", pod, node, releaseReason, message)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Evict indicates an expected call of Evict.
func (mr *MockEvictionExecutorMockRecorder) Evict(pod, node, releaseReason, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Evict", reflect.TypeOf((*MockEvictionExecutor)(nil).Evict), pod, node, releaseReason, message)
}

// IsPodEvicted mocks base method.
func (m *MockEvictionExecutor) IsPodEvicted(arg0 *v1.Pod) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPodEvicted", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsPodEvicted indicates an expected call of IsPodEvicted.
func (mr *MockEvictionExecutorMockRecorder) IsPodEvicted(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPodEvicted", reflect.TypeOf((*MockEvictionExecutor)(nil).IsPodEvicted), arg0)
}
