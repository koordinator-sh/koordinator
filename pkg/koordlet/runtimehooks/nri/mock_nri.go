/*
Copyright 2022 The Koordinator Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package nri is a generated GoMock package.
package nri

import (
	context "context"
	reflect "reflect"

	api "github.com/containerd/nri/pkg/api"
	gomock "github.com/golang/mock/gomock"
)

// MockStubInterface is a mock of StubInterface interface.
type MockStubInterface struct {
	ctrl     *gomock.Controller
	recorder *MockStubInterfaceMockRecorder
}

// MockStubInterfaceMockRecorder is the mock recorder for MockStubInterface.
type MockStubInterfaceMockRecorder struct {
	mock *MockStubInterface
}

// NewMockStubInterface creates a new mock instance.
func NewMockStubInterface(ctrl *gomock.Controller) *MockStubInterface {
	mock := &MockStubInterface{ctrl: ctrl}
	mock.recorder = &MockStubInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStubInterface) EXPECT() *MockStubInterfaceMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockStubInterface) Run(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockStubInterfaceMockRecorder) Run(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockStubInterface)(nil).Run), arg0)
}

// Start mocks base method.
func (m *MockStubInterface) Start(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockStubInterfaceMockRecorder) Start(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockStubInterface)(nil).Start), arg0)
}

// Stop mocks base method.
func (m *MockStubInterface) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockStubInterfaceMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockStubInterface)(nil).Stop))
}

// UpdateContainers mocks base method.
func (m *MockStubInterface) UpdateContainers(arg0 []*api.ContainerUpdate) ([]*api.ContainerUpdate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContainers", arg0)
	ret0, _ := ret[0].([]*api.ContainerUpdate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContainers indicates an expected call of UpdateContainers.
func (mr *MockStubInterfaceMockRecorder) UpdateContainers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContainers", reflect.TypeOf((*MockStubInterface)(nil).UpdateContainers), arg0)
}

// Wait mocks base method.
func (m *MockStubInterface) Wait() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Wait")
}

// Wait indicates an expected call of Wait.
func (mr *MockStubInterfaceMockRecorder) Wait() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockStubInterface)(nil).Wait))
}
