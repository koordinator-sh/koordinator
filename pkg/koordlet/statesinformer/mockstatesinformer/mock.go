// Code generated by MockGen. DO NOT EDIT.
// Source: states_informer.go

// Package mock_statesinformer is a generated GoMock package.
package mock_statesinformer

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	statesinformer "github.com/koordinator-sh/koordinator/pkg/koordlet/statesinformer"
	v1 "k8s.io/api/core/v1"
)

// MockStatesInformer is a mock of StatesInformer interface.
type MockStatesInformer struct {
	ctrl     *gomock.Controller
	recorder *MockStatesInformerMockRecorder
}

// MockStatesInformerMockRecorder is the mock recorder for MockStatesInformer.
type MockStatesInformerMockRecorder struct {
	mock *MockStatesInformer
}

// NewMockStatesInformer creates a new mock instance.
func NewMockStatesInformer(ctrl *gomock.Controller) *MockStatesInformer {
	mock := &MockStatesInformer{ctrl: ctrl}
	mock.recorder = &MockStatesInformerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatesInformer) EXPECT() *MockStatesInformerMockRecorder {
	return m.recorder
}

// GetAllPods mocks base method.
func (m *MockStatesInformer) GetAllPods() []*statesinformer.PodMeta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPods")
	ret0, _ := ret[0].([]*statesinformer.PodMeta)
	return ret0
}

// GetAllPods indicates an expected call of GetAllPods.
func (mr *MockStatesInformerMockRecorder) GetAllPods() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPods", reflect.TypeOf((*MockStatesInformer)(nil).GetAllPods))
}

// GetNode mocks base method.
func (m *MockStatesInformer) GetNode() *v1.Node {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNode")
	ret0, _ := ret[0].(*v1.Node)
	return ret0
}

// GetNode indicates an expected call of GetNode.
func (mr *MockStatesInformerMockRecorder) GetNode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNode", reflect.TypeOf((*MockStatesInformer)(nil).GetNode))
}

// HasSynced mocks base method.
func (m *MockStatesInformer) HasSynced() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasSynced")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasSynced indicates an expected call of HasSynced.
func (mr *MockStatesInformerMockRecorder) HasSynced() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasSynced", reflect.TypeOf((*MockStatesInformer)(nil).HasSynced))
}

// Run mocks base method.
func (m *MockStatesInformer) Run(stopCh <-chan struct{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", stopCh)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockStatesInformerMockRecorder) Run(stopCh interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockStatesInformer)(nil).Run), stopCh)
}
