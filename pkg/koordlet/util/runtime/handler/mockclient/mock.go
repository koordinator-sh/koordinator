/*
Copyright 2022 The Koordinator Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
//

// Code generated by MockGen. DO NOT EDIT.
// Source: vendor/k8s.io/cri-api/pkg/apis/runtime/v1/api.pb.go

// Package mock_client is a generated GoMock package.
package mock_client

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	v1 "k8s.io/cri-api/pkg/apis/runtime/v1"
)

// MockRuntimeServiceClient is a mock of RuntimeServiceClient interface.
type MockRuntimeServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockRuntimeServiceClientMockRecorder
}

// MockRuntimeServiceClientMockRecorder is the mock recorder for MockRuntimeServiceClient.
type MockRuntimeServiceClientMockRecorder struct {
	mock *MockRuntimeServiceClient
}

// NewMockRuntimeServiceClient creates a new mock instance.
func NewMockRuntimeServiceClient(ctrl *gomock.Controller) *MockRuntimeServiceClient {
	mock := &MockRuntimeServiceClient{ctrl: ctrl}
	mock.recorder = &MockRuntimeServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRuntimeServiceClient) EXPECT() *MockRuntimeServiceClientMockRecorder {
	return m.recorder
}

// Attach mocks base method.
func (m *MockRuntimeServiceClient) Attach(ctx context.Context, in *v1.AttachRequest, opts ...grpc.CallOption) (*v1.AttachResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Attach", varargs...)
	ret0, _ := ret[0].(*v1.AttachResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Attach indicates an expected call of Attach.
func (mr *MockRuntimeServiceClientMockRecorder) Attach(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attach", reflect.TypeOf((*MockRuntimeServiceClient)(nil).Attach), varargs...)
}

// CheckpointContainer mocks base method.
func (m *MockRuntimeServiceClient) CheckpointContainer(ctx context.Context, in *v1.CheckpointContainerRequest, opts ...grpc.CallOption) (*v1.CheckpointContainerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckpointContainer", varargs...)
	ret0, _ := ret[0].(*v1.CheckpointContainerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckpointContainer indicates an expected call of CheckpointContainer.
func (mr *MockRuntimeServiceClientMockRecorder) CheckpointContainer(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckpointContainer", reflect.TypeOf((*MockRuntimeServiceClient)(nil).CheckpointContainer), varargs...)
}

// ContainerStats mocks base method.
func (m *MockRuntimeServiceClient) ContainerStats(ctx context.Context, in *v1.ContainerStatsRequest, opts ...grpc.CallOption) (*v1.ContainerStatsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ContainerStats", varargs...)
	ret0, _ := ret[0].(*v1.ContainerStatsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerStats indicates an expected call of ContainerStats.
func (mr *MockRuntimeServiceClientMockRecorder) ContainerStats(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerStats", reflect.TypeOf((*MockRuntimeServiceClient)(nil).ContainerStats), varargs...)
}

// ContainerStatus mocks base method.
func (m *MockRuntimeServiceClient) ContainerStatus(ctx context.Context, in *v1.ContainerStatusRequest, opts ...grpc.CallOption) (*v1.ContainerStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ContainerStatus", varargs...)
	ret0, _ := ret[0].(*v1.ContainerStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerStatus indicates an expected call of ContainerStatus.
func (mr *MockRuntimeServiceClientMockRecorder) ContainerStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerStatus", reflect.TypeOf((*MockRuntimeServiceClient)(nil).ContainerStatus), varargs...)
}

// CreateContainer mocks base method.
func (m *MockRuntimeServiceClient) CreateContainer(ctx context.Context, in *v1.CreateContainerRequest, opts ...grpc.CallOption) (*v1.CreateContainerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateContainer", varargs...)
	ret0, _ := ret[0].(*v1.CreateContainerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContainer indicates an expected call of CreateContainer.
func (mr *MockRuntimeServiceClientMockRecorder) CreateContainer(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContainer", reflect.TypeOf((*MockRuntimeServiceClient)(nil).CreateContainer), varargs...)
}

// Exec mocks base method.
func (m *MockRuntimeServiceClient) Exec(ctx context.Context, in *v1.ExecRequest, opts ...grpc.CallOption) (*v1.ExecResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(*v1.ExecResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockRuntimeServiceClientMockRecorder) Exec(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockRuntimeServiceClient)(nil).Exec), varargs...)
}

// ExecSync mocks base method.
func (m *MockRuntimeServiceClient) ExecSync(ctx context.Context, in *v1.ExecSyncRequest, opts ...grpc.CallOption) (*v1.ExecSyncResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecSync", varargs...)
	ret0, _ := ret[0].(*v1.ExecSyncResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecSync indicates an expected call of ExecSync.
func (mr *MockRuntimeServiceClientMockRecorder) ExecSync(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecSync", reflect.TypeOf((*MockRuntimeServiceClient)(nil).ExecSync), varargs...)
}

// GetContainerEvents mocks base method.
func (m *MockRuntimeServiceClient) GetContainerEvents(ctx context.Context, in *v1.GetEventsRequest, opts ...grpc.CallOption) (v1.RuntimeService_GetContainerEventsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContainerEvents", varargs...)
	ret0, _ := ret[0].(v1.RuntimeService_GetContainerEventsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerEvents indicates an expected call of GetContainerEvents.
func (mr *MockRuntimeServiceClientMockRecorder) GetContainerEvents(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerEvents", reflect.TypeOf((*MockRuntimeServiceClient)(nil).GetContainerEvents), varargs...)
}

// ListContainerStats mocks base method.
func (m *MockRuntimeServiceClient) ListContainerStats(ctx context.Context, in *v1.ListContainerStatsRequest, opts ...grpc.CallOption) (*v1.ListContainerStatsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListContainerStats", varargs...)
	ret0, _ := ret[0].(*v1.ListContainerStatsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListContainerStats indicates an expected call of ListContainerStats.
func (mr *MockRuntimeServiceClientMockRecorder) ListContainerStats(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContainerStats", reflect.TypeOf((*MockRuntimeServiceClient)(nil).ListContainerStats), varargs...)
}

// ListContainers mocks base method.
func (m *MockRuntimeServiceClient) ListContainers(ctx context.Context, in *v1.ListContainersRequest, opts ...grpc.CallOption) (*v1.ListContainersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListContainers", varargs...)
	ret0, _ := ret[0].(*v1.ListContainersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListContainers indicates an expected call of ListContainers.
func (mr *MockRuntimeServiceClientMockRecorder) ListContainers(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContainers", reflect.TypeOf((*MockRuntimeServiceClient)(nil).ListContainers), varargs...)
}

// ListMetricDescriptors mocks base method.
func (m *MockRuntimeServiceClient) ListMetricDescriptors(ctx context.Context, in *v1.ListMetricDescriptorsRequest, opts ...grpc.CallOption) (*v1.ListMetricDescriptorsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMetricDescriptors", varargs...)
	ret0, _ := ret[0].(*v1.ListMetricDescriptorsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMetricDescriptors indicates an expected call of ListMetricDescriptors.
func (mr *MockRuntimeServiceClientMockRecorder) ListMetricDescriptors(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMetricDescriptors", reflect.TypeOf((*MockRuntimeServiceClient)(nil).ListMetricDescriptors), varargs...)
}

// ListPodSandbox mocks base method.
func (m *MockRuntimeServiceClient) ListPodSandbox(ctx context.Context, in *v1.ListPodSandboxRequest, opts ...grpc.CallOption) (*v1.ListPodSandboxResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPodSandbox", varargs...)
	ret0, _ := ret[0].(*v1.ListPodSandboxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPodSandbox indicates an expected call of ListPodSandbox.
func (mr *MockRuntimeServiceClientMockRecorder) ListPodSandbox(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPodSandbox", reflect.TypeOf((*MockRuntimeServiceClient)(nil).ListPodSandbox), varargs...)
}

// ListPodSandboxMetrics mocks base method.
func (m *MockRuntimeServiceClient) ListPodSandboxMetrics(ctx context.Context, in *v1.ListPodSandboxMetricsRequest, opts ...grpc.CallOption) (*v1.ListPodSandboxMetricsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPodSandboxMetrics", varargs...)
	ret0, _ := ret[0].(*v1.ListPodSandboxMetricsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPodSandboxMetrics indicates an expected call of ListPodSandboxMetrics.
func (mr *MockRuntimeServiceClientMockRecorder) ListPodSandboxMetrics(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPodSandboxMetrics", reflect.TypeOf((*MockRuntimeServiceClient)(nil).ListPodSandboxMetrics), varargs...)
}

// ListPodSandboxStats mocks base method.
func (m *MockRuntimeServiceClient) ListPodSandboxStats(ctx context.Context, in *v1.ListPodSandboxStatsRequest, opts ...grpc.CallOption) (*v1.ListPodSandboxStatsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPodSandboxStats", varargs...)
	ret0, _ := ret[0].(*v1.ListPodSandboxStatsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPodSandboxStats indicates an expected call of ListPodSandboxStats.
func (mr *MockRuntimeServiceClientMockRecorder) ListPodSandboxStats(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPodSandboxStats", reflect.TypeOf((*MockRuntimeServiceClient)(nil).ListPodSandboxStats), varargs...)
}

// PodSandboxStats mocks base method.
func (m *MockRuntimeServiceClient) PodSandboxStats(ctx context.Context, in *v1.PodSandboxStatsRequest, opts ...grpc.CallOption) (*v1.PodSandboxStatsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PodSandboxStats", varargs...)
	ret0, _ := ret[0].(*v1.PodSandboxStatsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PodSandboxStats indicates an expected call of PodSandboxStats.
func (mr *MockRuntimeServiceClientMockRecorder) PodSandboxStats(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PodSandboxStats", reflect.TypeOf((*MockRuntimeServiceClient)(nil).PodSandboxStats), varargs...)
}

// PodSandboxStatus mocks base method.
func (m *MockRuntimeServiceClient) PodSandboxStatus(ctx context.Context, in *v1.PodSandboxStatusRequest, opts ...grpc.CallOption) (*v1.PodSandboxStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PodSandboxStatus", varargs...)
	ret0, _ := ret[0].(*v1.PodSandboxStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PodSandboxStatus indicates an expected call of PodSandboxStatus.
func (mr *MockRuntimeServiceClientMockRecorder) PodSandboxStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PodSandboxStatus", reflect.TypeOf((*MockRuntimeServiceClient)(nil).PodSandboxStatus), varargs...)
}

// PortForward mocks base method.
func (m *MockRuntimeServiceClient) PortForward(ctx context.Context, in *v1.PortForwardRequest, opts ...grpc.CallOption) (*v1.PortForwardResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PortForward", varargs...)
	ret0, _ := ret[0].(*v1.PortForwardResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PortForward indicates an expected call of PortForward.
func (mr *MockRuntimeServiceClientMockRecorder) PortForward(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PortForward", reflect.TypeOf((*MockRuntimeServiceClient)(nil).PortForward), varargs...)
}

// RemoveContainer mocks base method.
func (m *MockRuntimeServiceClient) RemoveContainer(ctx context.Context, in *v1.RemoveContainerRequest, opts ...grpc.CallOption) (*v1.RemoveContainerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveContainer", varargs...)
	ret0, _ := ret[0].(*v1.RemoveContainerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveContainer indicates an expected call of RemoveContainer.
func (mr *MockRuntimeServiceClientMockRecorder) RemoveContainer(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveContainer", reflect.TypeOf((*MockRuntimeServiceClient)(nil).RemoveContainer), varargs...)
}

// RemovePodSandbox mocks base method.
func (m *MockRuntimeServiceClient) RemovePodSandbox(ctx context.Context, in *v1.RemovePodSandboxRequest, opts ...grpc.CallOption) (*v1.RemovePodSandboxResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemovePodSandbox", varargs...)
	ret0, _ := ret[0].(*v1.RemovePodSandboxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemovePodSandbox indicates an expected call of RemovePodSandbox.
func (mr *MockRuntimeServiceClientMockRecorder) RemovePodSandbox(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePodSandbox", reflect.TypeOf((*MockRuntimeServiceClient)(nil).RemovePodSandbox), varargs...)
}

// ReopenContainerLog mocks base method.
func (m *MockRuntimeServiceClient) ReopenContainerLog(ctx context.Context, in *v1.ReopenContainerLogRequest, opts ...grpc.CallOption) (*v1.ReopenContainerLogResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReopenContainerLog", varargs...)
	ret0, _ := ret[0].(*v1.ReopenContainerLogResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReopenContainerLog indicates an expected call of ReopenContainerLog.
func (mr *MockRuntimeServiceClientMockRecorder) ReopenContainerLog(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReopenContainerLog", reflect.TypeOf((*MockRuntimeServiceClient)(nil).ReopenContainerLog), varargs...)
}

// RunPodSandbox mocks base method.
func (m *MockRuntimeServiceClient) RunPodSandbox(ctx context.Context, in *v1.RunPodSandboxRequest, opts ...grpc.CallOption) (*v1.RunPodSandboxResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunPodSandbox", varargs...)
	ret0, _ := ret[0].(*v1.RunPodSandboxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunPodSandbox indicates an expected call of RunPodSandbox.
func (mr *MockRuntimeServiceClientMockRecorder) RunPodSandbox(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunPodSandbox", reflect.TypeOf((*MockRuntimeServiceClient)(nil).RunPodSandbox), varargs...)
}

// RuntimeConfig mocks base method.
func (m *MockRuntimeServiceClient) RuntimeConfig(ctx context.Context, in *v1.RuntimeConfigRequest, opts ...grpc.CallOption) (*v1.RuntimeConfigResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RuntimeConfig", varargs...)
	ret0, _ := ret[0].(*v1.RuntimeConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RuntimeConfig indicates an expected call of RuntimeConfig.
func (mr *MockRuntimeServiceClientMockRecorder) RuntimeConfig(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RuntimeConfig", reflect.TypeOf((*MockRuntimeServiceClient)(nil).RuntimeConfig), varargs...)
}

// StartContainer mocks base method.
func (m *MockRuntimeServiceClient) StartContainer(ctx context.Context, in *v1.StartContainerRequest, opts ...grpc.CallOption) (*v1.StartContainerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartContainer", varargs...)
	ret0, _ := ret[0].(*v1.StartContainerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartContainer indicates an expected call of StartContainer.
func (mr *MockRuntimeServiceClientMockRecorder) StartContainer(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartContainer", reflect.TypeOf((*MockRuntimeServiceClient)(nil).StartContainer), varargs...)
}

// Status mocks base method.
func (m *MockRuntimeServiceClient) Status(ctx context.Context, in *v1.StatusRequest, opts ...grpc.CallOption) (*v1.StatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Status", varargs...)
	ret0, _ := ret[0].(*v1.StatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockRuntimeServiceClientMockRecorder) Status(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockRuntimeServiceClient)(nil).Status), varargs...)
}

// StopContainer mocks base method.
func (m *MockRuntimeServiceClient) StopContainer(ctx context.Context, in *v1.StopContainerRequest, opts ...grpc.CallOption) (*v1.StopContainerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopContainer", varargs...)
	ret0, _ := ret[0].(*v1.StopContainerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopContainer indicates an expected call of StopContainer.
func (mr *MockRuntimeServiceClientMockRecorder) StopContainer(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopContainer", reflect.TypeOf((*MockRuntimeServiceClient)(nil).StopContainer), varargs...)
}

// StopPodSandbox mocks base method.
func (m *MockRuntimeServiceClient) StopPodSandbox(ctx context.Context, in *v1.StopPodSandboxRequest, opts ...grpc.CallOption) (*v1.StopPodSandboxResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopPodSandbox", varargs...)
	ret0, _ := ret[0].(*v1.StopPodSandboxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopPodSandbox indicates an expected call of StopPodSandbox.
func (mr *MockRuntimeServiceClientMockRecorder) StopPodSandbox(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopPodSandbox", reflect.TypeOf((*MockRuntimeServiceClient)(nil).StopPodSandbox), varargs...)
}

// UpdateContainerResources mocks base method.
func (m *MockRuntimeServiceClient) UpdateContainerResources(ctx context.Context, in *v1.UpdateContainerResourcesRequest, opts ...grpc.CallOption) (*v1.UpdateContainerResourcesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateContainerResources", varargs...)
	ret0, _ := ret[0].(*v1.UpdateContainerResourcesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContainerResources indicates an expected call of UpdateContainerResources.
func (mr *MockRuntimeServiceClientMockRecorder) UpdateContainerResources(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContainerResources", reflect.TypeOf((*MockRuntimeServiceClient)(nil).UpdateContainerResources), varargs...)
}

// UpdateRuntimeConfig mocks base method.
func (m *MockRuntimeServiceClient) UpdateRuntimeConfig(ctx context.Context, in *v1.UpdateRuntimeConfigRequest, opts ...grpc.CallOption) (*v1.UpdateRuntimeConfigResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRuntimeConfig", varargs...)
	ret0, _ := ret[0].(*v1.UpdateRuntimeConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRuntimeConfig indicates an expected call of UpdateRuntimeConfig.
func (mr *MockRuntimeServiceClientMockRecorder) UpdateRuntimeConfig(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRuntimeConfig", reflect.TypeOf((*MockRuntimeServiceClient)(nil).UpdateRuntimeConfig), varargs...)
}

// Version mocks base method.
func (m *MockRuntimeServiceClient) Version(ctx context.Context, in *v1.VersionRequest, opts ...grpc.CallOption) (*v1.VersionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Version", varargs...)
	ret0, _ := ret[0].(*v1.VersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Version indicates an expected call of Version.
func (mr *MockRuntimeServiceClientMockRecorder) Version(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockRuntimeServiceClient)(nil).Version), varargs...)
}

// MockRuntimeService_GetContainerEventsClient is a mock of RuntimeService_GetContainerEventsClient interface.
type MockRuntimeService_GetContainerEventsClient struct {
	ctrl     *gomock.Controller
	recorder *MockRuntimeService_GetContainerEventsClientMockRecorder
}

// MockRuntimeService_GetContainerEventsClientMockRecorder is the mock recorder for MockRuntimeService_GetContainerEventsClient.
type MockRuntimeService_GetContainerEventsClientMockRecorder struct {
	mock *MockRuntimeService_GetContainerEventsClient
}

// NewMockRuntimeService_GetContainerEventsClient creates a new mock instance.
func NewMockRuntimeService_GetContainerEventsClient(ctrl *gomock.Controller) *MockRuntimeService_GetContainerEventsClient {
	mock := &MockRuntimeService_GetContainerEventsClient{ctrl: ctrl}
	mock.recorder = &MockRuntimeService_GetContainerEventsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRuntimeService_GetContainerEventsClient) EXPECT() *MockRuntimeService_GetContainerEventsClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockRuntimeService_GetContainerEventsClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockRuntimeService_GetContainerEventsClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockRuntimeService_GetContainerEventsClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockRuntimeService_GetContainerEventsClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockRuntimeService_GetContainerEventsClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockRuntimeService_GetContainerEventsClient)(nil).Context))
}

// Header mocks base method.
func (m *MockRuntimeService_GetContainerEventsClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockRuntimeService_GetContainerEventsClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockRuntimeService_GetContainerEventsClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockRuntimeService_GetContainerEventsClient) Recv() (*v1.ContainerEventResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*v1.ContainerEventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockRuntimeService_GetContainerEventsClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockRuntimeService_GetContainerEventsClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockRuntimeService_GetContainerEventsClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockRuntimeService_GetContainerEventsClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockRuntimeService_GetContainerEventsClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockRuntimeService_GetContainerEventsClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockRuntimeService_GetContainerEventsClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockRuntimeService_GetContainerEventsClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockRuntimeService_GetContainerEventsClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockRuntimeService_GetContainerEventsClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockRuntimeService_GetContainerEventsClient)(nil).Trailer))
}

// MockRuntimeServiceServer is a mock of RuntimeServiceServer interface.
type MockRuntimeServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockRuntimeServiceServerMockRecorder
}

// MockRuntimeServiceServerMockRecorder is the mock recorder for MockRuntimeServiceServer.
type MockRuntimeServiceServerMockRecorder struct {
	mock *MockRuntimeServiceServer
}

// NewMockRuntimeServiceServer creates a new mock instance.
func NewMockRuntimeServiceServer(ctrl *gomock.Controller) *MockRuntimeServiceServer {
	mock := &MockRuntimeServiceServer{ctrl: ctrl}
	mock.recorder = &MockRuntimeServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRuntimeServiceServer) EXPECT() *MockRuntimeServiceServerMockRecorder {
	return m.recorder
}

// Attach mocks base method.
func (m *MockRuntimeServiceServer) Attach(arg0 context.Context, arg1 *v1.AttachRequest) (*v1.AttachResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Attach", arg0, arg1)
	ret0, _ := ret[0].(*v1.AttachResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Attach indicates an expected call of Attach.
func (mr *MockRuntimeServiceServerMockRecorder) Attach(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attach", reflect.TypeOf((*MockRuntimeServiceServer)(nil).Attach), arg0, arg1)
}

// CheckpointContainer mocks base method.
func (m *MockRuntimeServiceServer) CheckpointContainer(arg0 context.Context, arg1 *v1.CheckpointContainerRequest) (*v1.CheckpointContainerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckpointContainer", arg0, arg1)
	ret0, _ := ret[0].(*v1.CheckpointContainerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckpointContainer indicates an expected call of CheckpointContainer.
func (mr *MockRuntimeServiceServerMockRecorder) CheckpointContainer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckpointContainer", reflect.TypeOf((*MockRuntimeServiceServer)(nil).CheckpointContainer), arg0, arg1)
}

// ContainerStats mocks base method.
func (m *MockRuntimeServiceServer) ContainerStats(arg0 context.Context, arg1 *v1.ContainerStatsRequest) (*v1.ContainerStatsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerStats", arg0, arg1)
	ret0, _ := ret[0].(*v1.ContainerStatsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerStats indicates an expected call of ContainerStats.
func (mr *MockRuntimeServiceServerMockRecorder) ContainerStats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerStats", reflect.TypeOf((*MockRuntimeServiceServer)(nil).ContainerStats), arg0, arg1)
}

// ContainerStatus mocks base method.
func (m *MockRuntimeServiceServer) ContainerStatus(arg0 context.Context, arg1 *v1.ContainerStatusRequest) (*v1.ContainerStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerStatus", arg0, arg1)
	ret0, _ := ret[0].(*v1.ContainerStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerStatus indicates an expected call of ContainerStatus.
func (mr *MockRuntimeServiceServerMockRecorder) ContainerStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerStatus", reflect.TypeOf((*MockRuntimeServiceServer)(nil).ContainerStatus), arg0, arg1)
}

// CreateContainer mocks base method.
func (m *MockRuntimeServiceServer) CreateContainer(arg0 context.Context, arg1 *v1.CreateContainerRequest) (*v1.CreateContainerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContainer", arg0, arg1)
	ret0, _ := ret[0].(*v1.CreateContainerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContainer indicates an expected call of CreateContainer.
func (mr *MockRuntimeServiceServerMockRecorder) CreateContainer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContainer", reflect.TypeOf((*MockRuntimeServiceServer)(nil).CreateContainer), arg0, arg1)
}

// Exec mocks base method.
func (m *MockRuntimeServiceServer) Exec(arg0 context.Context, arg1 *v1.ExecRequest) (*v1.ExecResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", arg0, arg1)
	ret0, _ := ret[0].(*v1.ExecResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockRuntimeServiceServerMockRecorder) Exec(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockRuntimeServiceServer)(nil).Exec), arg0, arg1)
}

// ExecSync mocks base method.
func (m *MockRuntimeServiceServer) ExecSync(arg0 context.Context, arg1 *v1.ExecSyncRequest) (*v1.ExecSyncResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecSync", arg0, arg1)
	ret0, _ := ret[0].(*v1.ExecSyncResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecSync indicates an expected call of ExecSync.
func (mr *MockRuntimeServiceServerMockRecorder) ExecSync(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecSync", reflect.TypeOf((*MockRuntimeServiceServer)(nil).ExecSync), arg0, arg1)
}

// GetContainerEvents mocks base method.
func (m *MockRuntimeServiceServer) GetContainerEvents(arg0 *v1.GetEventsRequest, arg1 v1.RuntimeService_GetContainerEventsServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerEvents", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetContainerEvents indicates an expected call of GetContainerEvents.
func (mr *MockRuntimeServiceServerMockRecorder) GetContainerEvents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerEvents", reflect.TypeOf((*MockRuntimeServiceServer)(nil).GetContainerEvents), arg0, arg1)
}

// ListContainerStats mocks base method.
func (m *MockRuntimeServiceServer) ListContainerStats(arg0 context.Context, arg1 *v1.ListContainerStatsRequest) (*v1.ListContainerStatsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContainerStats", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListContainerStatsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListContainerStats indicates an expected call of ListContainerStats.
func (mr *MockRuntimeServiceServerMockRecorder) ListContainerStats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContainerStats", reflect.TypeOf((*MockRuntimeServiceServer)(nil).ListContainerStats), arg0, arg1)
}

// ListContainers mocks base method.
func (m *MockRuntimeServiceServer) ListContainers(arg0 context.Context, arg1 *v1.ListContainersRequest) (*v1.ListContainersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContainers", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListContainersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListContainers indicates an expected call of ListContainers.
func (mr *MockRuntimeServiceServerMockRecorder) ListContainers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContainers", reflect.TypeOf((*MockRuntimeServiceServer)(nil).ListContainers), arg0, arg1)
}

// ListMetricDescriptors mocks base method.
func (m *MockRuntimeServiceServer) ListMetricDescriptors(arg0 context.Context, arg1 *v1.ListMetricDescriptorsRequest) (*v1.ListMetricDescriptorsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMetricDescriptors", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListMetricDescriptorsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMetricDescriptors indicates an expected call of ListMetricDescriptors.
func (mr *MockRuntimeServiceServerMockRecorder) ListMetricDescriptors(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMetricDescriptors", reflect.TypeOf((*MockRuntimeServiceServer)(nil).ListMetricDescriptors), arg0, arg1)
}

// ListPodSandbox mocks base method.
func (m *MockRuntimeServiceServer) ListPodSandbox(arg0 context.Context, arg1 *v1.ListPodSandboxRequest) (*v1.ListPodSandboxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPodSandbox", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListPodSandboxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPodSandbox indicates an expected call of ListPodSandbox.
func (mr *MockRuntimeServiceServerMockRecorder) ListPodSandbox(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPodSandbox", reflect.TypeOf((*MockRuntimeServiceServer)(nil).ListPodSandbox), arg0, arg1)
}

// ListPodSandboxMetrics mocks base method.
func (m *MockRuntimeServiceServer) ListPodSandboxMetrics(arg0 context.Context, arg1 *v1.ListPodSandboxMetricsRequest) (*v1.ListPodSandboxMetricsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPodSandboxMetrics", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListPodSandboxMetricsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPodSandboxMetrics indicates an expected call of ListPodSandboxMetrics.
func (mr *MockRuntimeServiceServerMockRecorder) ListPodSandboxMetrics(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPodSandboxMetrics", reflect.TypeOf((*MockRuntimeServiceServer)(nil).ListPodSandboxMetrics), arg0, arg1)
}

// ListPodSandboxStats mocks base method.
func (m *MockRuntimeServiceServer) ListPodSandboxStats(arg0 context.Context, arg1 *v1.ListPodSandboxStatsRequest) (*v1.ListPodSandboxStatsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPodSandboxStats", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListPodSandboxStatsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPodSandboxStats indicates an expected call of ListPodSandboxStats.
func (mr *MockRuntimeServiceServerMockRecorder) ListPodSandboxStats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPodSandboxStats", reflect.TypeOf((*MockRuntimeServiceServer)(nil).ListPodSandboxStats), arg0, arg1)
}

// PodSandboxStats mocks base method.
func (m *MockRuntimeServiceServer) PodSandboxStats(arg0 context.Context, arg1 *v1.PodSandboxStatsRequest) (*v1.PodSandboxStatsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PodSandboxStats", arg0, arg1)
	ret0, _ := ret[0].(*v1.PodSandboxStatsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PodSandboxStats indicates an expected call of PodSandboxStats.
func (mr *MockRuntimeServiceServerMockRecorder) PodSandboxStats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PodSandboxStats", reflect.TypeOf((*MockRuntimeServiceServer)(nil).PodSandboxStats), arg0, arg1)
}

// PodSandboxStatus mocks base method.
func (m *MockRuntimeServiceServer) PodSandboxStatus(arg0 context.Context, arg1 *v1.PodSandboxStatusRequest) (*v1.PodSandboxStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PodSandboxStatus", arg0, arg1)
	ret0, _ := ret[0].(*v1.PodSandboxStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PodSandboxStatus indicates an expected call of PodSandboxStatus.
func (mr *MockRuntimeServiceServerMockRecorder) PodSandboxStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PodSandboxStatus", reflect.TypeOf((*MockRuntimeServiceServer)(nil).PodSandboxStatus), arg0, arg1)
}

// PortForward mocks base method.
func (m *MockRuntimeServiceServer) PortForward(arg0 context.Context, arg1 *v1.PortForwardRequest) (*v1.PortForwardResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PortForward", arg0, arg1)
	ret0, _ := ret[0].(*v1.PortForwardResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PortForward indicates an expected call of PortForward.
func (mr *MockRuntimeServiceServerMockRecorder) PortForward(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PortForward", reflect.TypeOf((*MockRuntimeServiceServer)(nil).PortForward), arg0, arg1)
}

// RemoveContainer mocks base method.
func (m *MockRuntimeServiceServer) RemoveContainer(arg0 context.Context, arg1 *v1.RemoveContainerRequest) (*v1.RemoveContainerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveContainer", arg0, arg1)
	ret0, _ := ret[0].(*v1.RemoveContainerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveContainer indicates an expected call of RemoveContainer.
func (mr *MockRuntimeServiceServerMockRecorder) RemoveContainer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveContainer", reflect.TypeOf((*MockRuntimeServiceServer)(nil).RemoveContainer), arg0, arg1)
}

// RemovePodSandbox mocks base method.
func (m *MockRuntimeServiceServer) RemovePodSandbox(arg0 context.Context, arg1 *v1.RemovePodSandboxRequest) (*v1.RemovePodSandboxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePodSandbox", arg0, arg1)
	ret0, _ := ret[0].(*v1.RemovePodSandboxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemovePodSandbox indicates an expected call of RemovePodSandbox.
func (mr *MockRuntimeServiceServerMockRecorder) RemovePodSandbox(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePodSandbox", reflect.TypeOf((*MockRuntimeServiceServer)(nil).RemovePodSandbox), arg0, arg1)
}

// ReopenContainerLog mocks base method.
func (m *MockRuntimeServiceServer) ReopenContainerLog(arg0 context.Context, arg1 *v1.ReopenContainerLogRequest) (*v1.ReopenContainerLogResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReopenContainerLog", arg0, arg1)
	ret0, _ := ret[0].(*v1.ReopenContainerLogResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReopenContainerLog indicates an expected call of ReopenContainerLog.
func (mr *MockRuntimeServiceServerMockRecorder) ReopenContainerLog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReopenContainerLog", reflect.TypeOf((*MockRuntimeServiceServer)(nil).ReopenContainerLog), arg0, arg1)
}

// RunPodSandbox mocks base method.
func (m *MockRuntimeServiceServer) RunPodSandbox(arg0 context.Context, arg1 *v1.RunPodSandboxRequest) (*v1.RunPodSandboxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunPodSandbox", arg0, arg1)
	ret0, _ := ret[0].(*v1.RunPodSandboxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunPodSandbox indicates an expected call of RunPodSandbox.
func (mr *MockRuntimeServiceServerMockRecorder) RunPodSandbox(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunPodSandbox", reflect.TypeOf((*MockRuntimeServiceServer)(nil).RunPodSandbox), arg0, arg1)
}

// RuntimeConfig mocks base method.
func (m *MockRuntimeServiceServer) RuntimeConfig(arg0 context.Context, arg1 *v1.RuntimeConfigRequest) (*v1.RuntimeConfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RuntimeConfig", arg0, arg1)
	ret0, _ := ret[0].(*v1.RuntimeConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RuntimeConfig indicates an expected call of RuntimeConfig.
func (mr *MockRuntimeServiceServerMockRecorder) RuntimeConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RuntimeConfig", reflect.TypeOf((*MockRuntimeServiceServer)(nil).RuntimeConfig), arg0, arg1)
}

// StartContainer mocks base method.
func (m *MockRuntimeServiceServer) StartContainer(arg0 context.Context, arg1 *v1.StartContainerRequest) (*v1.StartContainerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartContainer", arg0, arg1)
	ret0, _ := ret[0].(*v1.StartContainerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartContainer indicates an expected call of StartContainer.
func (mr *MockRuntimeServiceServerMockRecorder) StartContainer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartContainer", reflect.TypeOf((*MockRuntimeServiceServer)(nil).StartContainer), arg0, arg1)
}

// Status mocks base method.
func (m *MockRuntimeServiceServer) Status(arg0 context.Context, arg1 *v1.StatusRequest) (*v1.StatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", arg0, arg1)
	ret0, _ := ret[0].(*v1.StatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockRuntimeServiceServerMockRecorder) Status(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockRuntimeServiceServer)(nil).Status), arg0, arg1)
}

// StopContainer mocks base method.
func (m *MockRuntimeServiceServer) StopContainer(arg0 context.Context, arg1 *v1.StopContainerRequest) (*v1.StopContainerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopContainer", arg0, arg1)
	ret0, _ := ret[0].(*v1.StopContainerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopContainer indicates an expected call of StopContainer.
func (mr *MockRuntimeServiceServerMockRecorder) StopContainer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopContainer", reflect.TypeOf((*MockRuntimeServiceServer)(nil).StopContainer), arg0, arg1)
}

// StopPodSandbox mocks base method.
func (m *MockRuntimeServiceServer) StopPodSandbox(arg0 context.Context, arg1 *v1.StopPodSandboxRequest) (*v1.StopPodSandboxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopPodSandbox", arg0, arg1)
	ret0, _ := ret[0].(*v1.StopPodSandboxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopPodSandbox indicates an expected call of StopPodSandbox.
func (mr *MockRuntimeServiceServerMockRecorder) StopPodSandbox(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopPodSandbox", reflect.TypeOf((*MockRuntimeServiceServer)(nil).StopPodSandbox), arg0, arg1)
}

// UpdateContainerResources mocks base method.
func (m *MockRuntimeServiceServer) UpdateContainerResources(arg0 context.Context, arg1 *v1.UpdateContainerResourcesRequest) (*v1.UpdateContainerResourcesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContainerResources", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpdateContainerResourcesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContainerResources indicates an expected call of UpdateContainerResources.
func (mr *MockRuntimeServiceServerMockRecorder) UpdateContainerResources(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContainerResources", reflect.TypeOf((*MockRuntimeServiceServer)(nil).UpdateContainerResources), arg0, arg1)
}

// UpdateRuntimeConfig mocks base method.
func (m *MockRuntimeServiceServer) UpdateRuntimeConfig(arg0 context.Context, arg1 *v1.UpdateRuntimeConfigRequest) (*v1.UpdateRuntimeConfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRuntimeConfig", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpdateRuntimeConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRuntimeConfig indicates an expected call of UpdateRuntimeConfig.
func (mr *MockRuntimeServiceServerMockRecorder) UpdateRuntimeConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRuntimeConfig", reflect.TypeOf((*MockRuntimeServiceServer)(nil).UpdateRuntimeConfig), arg0, arg1)
}

// Version mocks base method.
func (m *MockRuntimeServiceServer) Version(arg0 context.Context, arg1 *v1.VersionRequest) (*v1.VersionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version", arg0, arg1)
	ret0, _ := ret[0].(*v1.VersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Version indicates an expected call of Version.
func (mr *MockRuntimeServiceServerMockRecorder) Version(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockRuntimeServiceServer)(nil).Version), arg0, arg1)
}

// MockRuntimeService_GetContainerEventsServer is a mock of RuntimeService_GetContainerEventsServer interface.
type MockRuntimeService_GetContainerEventsServer struct {
	ctrl     *gomock.Controller
	recorder *MockRuntimeService_GetContainerEventsServerMockRecorder
}

// MockRuntimeService_GetContainerEventsServerMockRecorder is the mock recorder for MockRuntimeService_GetContainerEventsServer.
type MockRuntimeService_GetContainerEventsServerMockRecorder struct {
	mock *MockRuntimeService_GetContainerEventsServer
}

// NewMockRuntimeService_GetContainerEventsServer creates a new mock instance.
func NewMockRuntimeService_GetContainerEventsServer(ctrl *gomock.Controller) *MockRuntimeService_GetContainerEventsServer {
	mock := &MockRuntimeService_GetContainerEventsServer{ctrl: ctrl}
	mock.recorder = &MockRuntimeService_GetContainerEventsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRuntimeService_GetContainerEventsServer) EXPECT() *MockRuntimeService_GetContainerEventsServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockRuntimeService_GetContainerEventsServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockRuntimeService_GetContainerEventsServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockRuntimeService_GetContainerEventsServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockRuntimeService_GetContainerEventsServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockRuntimeService_GetContainerEventsServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockRuntimeService_GetContainerEventsServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockRuntimeService_GetContainerEventsServer) Send(arg0 *v1.ContainerEventResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockRuntimeService_GetContainerEventsServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockRuntimeService_GetContainerEventsServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockRuntimeService_GetContainerEventsServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockRuntimeService_GetContainerEventsServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockRuntimeService_GetContainerEventsServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockRuntimeService_GetContainerEventsServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockRuntimeService_GetContainerEventsServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockRuntimeService_GetContainerEventsServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockRuntimeService_GetContainerEventsServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockRuntimeService_GetContainerEventsServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockRuntimeService_GetContainerEventsServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockRuntimeService_GetContainerEventsServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockRuntimeService_GetContainerEventsServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockRuntimeService_GetContainerEventsServer)(nil).SetTrailer), arg0)
}

// MockImageServiceClient is a mock of ImageServiceClient interface.
type MockImageServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockImageServiceClientMockRecorder
}

// MockImageServiceClientMockRecorder is the mock recorder for MockImageServiceClient.
type MockImageServiceClientMockRecorder struct {
	mock *MockImageServiceClient
}

// NewMockImageServiceClient creates a new mock instance.
func NewMockImageServiceClient(ctrl *gomock.Controller) *MockImageServiceClient {
	mock := &MockImageServiceClient{ctrl: ctrl}
	mock.recorder = &MockImageServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageServiceClient) EXPECT() *MockImageServiceClientMockRecorder {
	return m.recorder
}

// ImageFsInfo mocks base method.
func (m *MockImageServiceClient) ImageFsInfo(ctx context.Context, in *v1.ImageFsInfoRequest, opts ...grpc.CallOption) (*v1.ImageFsInfoResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ImageFsInfo", varargs...)
	ret0, _ := ret[0].(*v1.ImageFsInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImageFsInfo indicates an expected call of ImageFsInfo.
func (mr *MockImageServiceClientMockRecorder) ImageFsInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageFsInfo", reflect.TypeOf((*MockImageServiceClient)(nil).ImageFsInfo), varargs...)
}

// ImageStatus mocks base method.
func (m *MockImageServiceClient) ImageStatus(ctx context.Context, in *v1.ImageStatusRequest, opts ...grpc.CallOption) (*v1.ImageStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ImageStatus", varargs...)
	ret0, _ := ret[0].(*v1.ImageStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImageStatus indicates an expected call of ImageStatus.
func (mr *MockImageServiceClientMockRecorder) ImageStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageStatus", reflect.TypeOf((*MockImageServiceClient)(nil).ImageStatus), varargs...)
}

// ListImages mocks base method.
func (m *MockImageServiceClient) ListImages(ctx context.Context, in *v1.ListImagesRequest, opts ...grpc.CallOption) (*v1.ListImagesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListImages", varargs...)
	ret0, _ := ret[0].(*v1.ListImagesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListImages indicates an expected call of ListImages.
func (mr *MockImageServiceClientMockRecorder) ListImages(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImages", reflect.TypeOf((*MockImageServiceClient)(nil).ListImages), varargs...)
}

// PullImage mocks base method.
func (m *MockImageServiceClient) PullImage(ctx context.Context, in *v1.PullImageRequest, opts ...grpc.CallOption) (*v1.PullImageResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PullImage", varargs...)
	ret0, _ := ret[0].(*v1.PullImageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PullImage indicates an expected call of PullImage.
func (mr *MockImageServiceClientMockRecorder) PullImage(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullImage", reflect.TypeOf((*MockImageServiceClient)(nil).PullImage), varargs...)
}

// RemoveImage mocks base method.
func (m *MockImageServiceClient) RemoveImage(ctx context.Context, in *v1.RemoveImageRequest, opts ...grpc.CallOption) (*v1.RemoveImageResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveImage", varargs...)
	ret0, _ := ret[0].(*v1.RemoveImageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveImage indicates an expected call of RemoveImage.
func (mr *MockImageServiceClientMockRecorder) RemoveImage(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveImage", reflect.TypeOf((*MockImageServiceClient)(nil).RemoveImage), varargs...)
}

// MockImageServiceServer is a mock of ImageServiceServer interface.
type MockImageServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockImageServiceServerMockRecorder
}

// MockImageServiceServerMockRecorder is the mock recorder for MockImageServiceServer.
type MockImageServiceServerMockRecorder struct {
	mock *MockImageServiceServer
}

// NewMockImageServiceServer creates a new mock instance.
func NewMockImageServiceServer(ctrl *gomock.Controller) *MockImageServiceServer {
	mock := &MockImageServiceServer{ctrl: ctrl}
	mock.recorder = &MockImageServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageServiceServer) EXPECT() *MockImageServiceServerMockRecorder {
	return m.recorder
}

// ImageFsInfo mocks base method.
func (m *MockImageServiceServer) ImageFsInfo(arg0 context.Context, arg1 *v1.ImageFsInfoRequest) (*v1.ImageFsInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageFsInfo", arg0, arg1)
	ret0, _ := ret[0].(*v1.ImageFsInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImageFsInfo indicates an expected call of ImageFsInfo.
func (mr *MockImageServiceServerMockRecorder) ImageFsInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageFsInfo", reflect.TypeOf((*MockImageServiceServer)(nil).ImageFsInfo), arg0, arg1)
}

// ImageStatus mocks base method.
func (m *MockImageServiceServer) ImageStatus(arg0 context.Context, arg1 *v1.ImageStatusRequest) (*v1.ImageStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageStatus", arg0, arg1)
	ret0, _ := ret[0].(*v1.ImageStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImageStatus indicates an expected call of ImageStatus.
func (mr *MockImageServiceServerMockRecorder) ImageStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageStatus", reflect.TypeOf((*MockImageServiceServer)(nil).ImageStatus), arg0, arg1)
}

// ListImages mocks base method.
func (m *MockImageServiceServer) ListImages(arg0 context.Context, arg1 *v1.ListImagesRequest) (*v1.ListImagesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListImages", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListImagesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListImages indicates an expected call of ListImages.
func (mr *MockImageServiceServerMockRecorder) ListImages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImages", reflect.TypeOf((*MockImageServiceServer)(nil).ListImages), arg0, arg1)
}

// PullImage mocks base method.
func (m *MockImageServiceServer) PullImage(arg0 context.Context, arg1 *v1.PullImageRequest) (*v1.PullImageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PullImage", arg0, arg1)
	ret0, _ := ret[0].(*v1.PullImageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PullImage indicates an expected call of PullImage.
func (mr *MockImageServiceServerMockRecorder) PullImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullImage", reflect.TypeOf((*MockImageServiceServer)(nil).PullImage), arg0, arg1)
}

// RemoveImage mocks base method.
func (m *MockImageServiceServer) RemoveImage(arg0 context.Context, arg1 *v1.RemoveImageRequest) (*v1.RemoveImageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveImage", arg0, arg1)
	ret0, _ := ret[0].(*v1.RemoveImageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveImage indicates an expected call of RemoveImage.
func (mr *MockImageServiceServerMockRecorder) RemoveImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveImage", reflect.TypeOf((*MockImageServiceServer)(nil).RemoveImage), arg0, arg1)
}
